{"version":3,"sources":["RadioButton.tsx"],"names":["RadioButton","value","size","style","onValueChange","palette","dark","frontSize","backgroundColor","success","grey","width","height","borderRadius","alpha","rgb","string","styles","container","iconContainer","StyleSheet","create","justifyContent","alignItems"],"mappings":";;;;;;;AAAA;;AACA;;AAQA;;AAEA;;AACA;;;;AAWA,SAASA,WAAT,OAKqB;AAAA,MALA;AACnBC,IAAAA,KAAK,GAAG,KADW;AAEnBC,IAAAA,IAAI,GAAG,EAFY;AAGnBC,IAAAA,KAHmB;AAInBC,IAAAA;AAJmB,GAKA;AACnB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoB,yCAA1B;AAEA,QAAMC,SAAS,GAAGL,IAAI,GAAG,EAAzB;AACA,QAAMM,eAAe,GAAGP,KAAK,GACzBI,OAAO,CAACI,OAAR,CAAgB,GAAhB,CADyB,GAEzBJ,OAAO,CAACK,IAAR,CAAaJ,IAAI,GAAG,GAAH,GAAS,GAA1B,CAFJ;AAIA,sBACE,6BAAC,qCAAD;AAA0B,IAAA,OAAO,EAAE,MAAMF,aAAN,aAAMA,aAAN,uBAAMA,aAAa,CAAG,CAACH,KAAJ;AAAtD,kBACE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACL;AACEU,MAAAA,KAAK,EAAET,IADT;AAEEU,MAAAA,MAAM,EAAEV,IAFV;AAGEW,MAAAA,YAAY,EAAEX,IAHhB;AAIEM,MAAAA,eAAe,EAAE,oBAAMA,eAAN,EAAuBM,KAAvB,CAA6B,GAA7B,EAAkCC,GAAlC,GAAwCC,MAAxC;AAJnB,KADK,EAOLC,MAAM,CAACC,SAPF,EAQLf,KARK;AADT,kBAYE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACL;AACEQ,MAAAA,KAAK,EAAEJ,SADT;AAEEK,MAAAA,MAAM,EAAEL,SAFV;AAGEM,MAAAA,YAAY,EAAEN,SAHhB;AAIEC,MAAAA;AAJF,KADK,EAOLS,MAAM,CAACE,aAPF;AADT,KAWGlB,KAAK,gBAAG,6BAAC,+BAAD;AAAO,IAAA,MAAM,EAAC,OAAd;AAAsB,IAAA,IAAI,EAAE;AAA5B,IAAH,GAAwC,IAXhD,CAZF,CADF,CADF;AA8BD;;AAED,MAAMgB,MAAM,GAAGG,wBAAWC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,cAAc,EAAE,QADP;AAETC,IAAAA,UAAU,EAAE;AAFH,GADoB;AAK/BJ,EAAAA,aAAa,EAAE;AACbG,IAAAA,cAAc,EAAE,QADH;AAEbC,IAAAA,UAAU,EAAE;AAFC;AALgB,CAAlB,CAAf;;eAWevB,W","sourcesContent":["import React from 'react';\nimport {\n  View,\n  TouchableWithoutFeedback,\n  StyleProp,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\n\nimport Color from 'color';\n\nimport { Check } from '@nomada-sh/react-native-eyecandy-icons';\nimport { useTheme } from '@nomada-sh/react-native-eyecandy-theme';\n\nexport interface RadioButtonProps {\n  value?: boolean;\n  onValueChange?: (checked: boolean) => void;\n  style?: StyleProp<ViewStyle>;\n  color?: string;\n  size?: number;\n  label?: string;\n}\n\nfunction RadioButton({\n  value = false,\n  size = 32,\n  style,\n  onValueChange,\n}: RadioButtonProps) {\n  const { palette, dark } = useTheme();\n\n  const frontSize = size - 10;\n  const backgroundColor = value\n    ? palette.success[200]\n    : palette.grey[dark ? 700 : 200];\n\n  return (\n    <TouchableWithoutFeedback onPress={() => onValueChange?.(!value)}>\n      <View\n        style={[\n          {\n            width: size,\n            height: size,\n            borderRadius: size,\n            backgroundColor: Color(backgroundColor).alpha(0.3).rgb().string(),\n          },\n          styles.container,\n          style,\n        ]}\n      >\n        <View\n          style={[\n            {\n              width: frontSize,\n              height: frontSize,\n              borderRadius: frontSize,\n              backgroundColor,\n            },\n            styles.iconContainer,\n          ]}\n        >\n          {value ? <Check stroke=\"white\" size={15} /> : null}\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default RadioButton;\n"]}