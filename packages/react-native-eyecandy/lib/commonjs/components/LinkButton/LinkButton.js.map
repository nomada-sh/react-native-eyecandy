{"version":3,"sources":["LinkButton.tsx"],"names":["LinkButton","text","icon","buttonStyle","color","showChevron","bold","focused","props","palette","colors","c","button","Icon","buttonStyles","styles","borderColor","primary","background","textStyle","foreground","fontWeight","StyleSheet","create","flexDirection","paddingHorizontal","borderWidth","flex","marginEnd"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;AAcA,SAASA,UAAT,OASoB;AAAA,MATA;AAClBC,IAAAA,IADkB;AAElBC,IAAAA,IAFkB;AAGlBC,IAAAA,WAHkB;AAIlBC,IAAAA,KAAK,GAAG,SAJU;AAKlBC,IAAAA,WAAW,GAAG,IALI;AAMlBC,IAAAA,IANkB;AAOlBC,IAAAA,OAPkB;AAQlB,OAAGC;AARe,GASA;AAClB,QAAM;AAAEC,IAAAA;AAAF,MAAc,yCAApB;AACA,QAAMC,MAAM,GAAG,yCAAUC,CAAC,IAAIA,CAAC,CAACC,MAAF,CAASR,KAAT,CAAf,CAAf;AAEA,QAAMS,IAAI,GAAGX,IAAb;AAEA,QAAMY,YAAY,GAAG,+BAAmB,CACtCC,MAAM,CAACH,MAD+B,EAEtCT,WAFsC,EAGtC;AACEa,IAAAA,WAAW,EAAET,OAAO,GAAGE,OAAO,CAACQ,OAAR,CAAgB,GAAhB,CAAH,GAA0BP,MAAM,CAACQ;AADvD,GAHsC,CAAnB,CAArB;AAQA,QAAMC,SAAoB,GAAG;AAC3Bf,IAAAA,KAAK,EAAEM,MAAM,CAACU,UADa;AAE3BC,IAAAA,UAAU,EAAEf,IAAI,GAAG,MAAH,GAAY;AAFD,GAA7B;AAKA,sBACE,6BAAC,mBAAD;AAAY,IAAA,KAAK,EAAEF,KAAnB;AAA0B,IAAA,WAAW,EAAEU;AAAvC,KAAyDN,KAAzD,GACGK,IAAI,gBACH,6BAAC,IAAD;AACE,IAAA,KAAK,EAAEE,MAAM,CAACb,IADhB;AAEE,IAAA,IAAI,EAAE,EAFR;AAGE,IAAA,MAAM,EAAEK,OAAO,GAAGE,OAAO,CAACQ,OAAR,CAAgB,GAAhB,CAAH,GAA2BE,SAAS,CAACf;AAHtD,IADG,GAMD,IAPN,eAQE,6BAAC,gBAAD;AAAM,IAAA,KAAK,EAAE,CAACe,SAAD,EAAYJ,MAAM,CAACd,IAAnB;AAAb,KAAwCA,IAAxC,CARF,EASGI,WAAW,gBAAG,6BAAC,sCAAD;AAAc,IAAA,KAAK,EAAC,SAApB;AAA8B,IAAA,IAAI,EAAE;AAApC,IAAH,GAAgD,IAT9D,CADF;AAaD;;AAED,MAAMU,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC/BX,EAAAA,MAAM,EAAE;AACNY,IAAAA,aAAa,EAAE,KADT;AAENC,IAAAA,iBAAiB,EAAE,EAFb;AAGNC,IAAAA,WAAW,EAAE;AAHP,GADuB;AAM/BzB,EAAAA,IAAI,EAAE;AACJ0B,IAAAA,IAAI,EAAE,CADF;AAEJC,IAAAA,SAAS,EAAE;AAFP,GANyB;AAU/B1B,EAAAA,IAAI,EAAE;AACJ0B,IAAAA,SAAS,EAAE;AADP;AAVyB,CAAlB,CAAf;;eAee5B,U","sourcesContent":["import React, { FC } from 'react';\nimport { StyleProp, StyleSheet, TextStyle, ViewStyle } from 'react-native';\n\nimport BaseButton, { BaseButtonProps } from '../BaseButton';\nimport { useTheme, useColors } from '@nomada-sh/react-native-eyecandy-theme';\nimport { usePressableStyles } from '../../hooks';\nimport { ChevronRight } from '@nomada-sh/react-native-eyecandy-icons';\nimport { Body } from '../../typography';\n\nexport interface LinkButtonProps extends BaseButtonProps {\n  icon?: FC<{\n    size?: number;\n    stroke?: string;\n    style?: StyleProp<ViewStyle>;\n  }>;\n  text: string;\n  showChevron?: boolean;\n  bold?: boolean;\n  focused?: boolean;\n}\n\nfunction LinkButton({\n  text,\n  icon,\n  buttonStyle,\n  color = 'default',\n  showChevron = true,\n  bold,\n  focused,\n  ...props\n}: LinkButtonProps) {\n  const { palette } = useTheme();\n  const colors = useColors(c => c.button[color]);\n\n  const Icon = icon;\n\n  const buttonStyles = usePressableStyles([\n    styles.button,\n    buttonStyle,\n    {\n      borderColor: focused ? palette.primary[500] : colors.background,\n    },\n  ]);\n\n  const textStyle: TextStyle = {\n    color: colors.foreground,\n    fontWeight: bold ? 'bold' : 'normal',\n  };\n\n  return (\n    <BaseButton color={color} buttonStyle={buttonStyles} {...props}>\n      {Icon ? (\n        <Icon\n          style={styles.icon}\n          size={20}\n          stroke={focused ? palette.primary[500] : (textStyle.color as string)}\n        />\n      ) : null}\n      <Body style={[textStyle, styles.text]}>{text}</Body>\n      {showChevron ? <ChevronRight color=\"greyout\" size={20} /> : null}\n    </BaseButton>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    flexDirection: 'row',\n    paddingHorizontal: 16,\n    borderWidth: 1,\n  },\n  text: {\n    flex: 1,\n    marginEnd: 16,\n  },\n  icon: {\n    marginEnd: 16,\n  },\n});\n\nexport default LinkButton;\n"]}