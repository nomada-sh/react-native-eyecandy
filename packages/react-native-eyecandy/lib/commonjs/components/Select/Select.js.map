{"version":3,"sources":["Select.tsx"],"names":["Select","items","onValueChange","value","color","icon","Icon","onFocus","onBlur","style","variant","pickerProps","placeholder","placeholderProp","androidItemSelectedColor","props","placeholderColor","Platform","OS","undefined","label","focused","setFocused","styles","withPaddingStart","selectRef","openPicker","current","focus","togglePicker","handleFocus","handleBlur","container","iconContainer","fontSize","selectContainer","ref","inputAndroid","input","inputIOS"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { Platform, TouchableWithoutFeedback, View } from 'react-native';\n\nimport SelectBase from 'react-native-picker-select';\n\nimport { ChevronDown } from '@nomada-sh/react-native-eyecandy-icons';\n\nimport type { SelectProps } from './typings';\nimport useStyles from './useStyles';\n\nfunction Select<ValueType>({\n  items = [],\n  onValueChange = () => {},\n  value,\n  color,\n  icon: Icon,\n  onFocus,\n  onBlur,\n  style,\n  variant,\n  pickerProps = {},\n  placeholder: placeholderProp = 'Select an item...',\n  androidItemSelectedColor = '#9ea0a4',\n  ...props\n}: SelectProps<ValueType>) {\n  const placeholder = useMemo(() => {\n    let placeholderColor =\n      Platform.OS === 'android' ? androidItemSelectedColor : undefined;\n\n    return {\n      label: placeholderProp,\n      value: null,\n      color: placeholderColor,\n    };\n  }, [placeholderProp, androidItemSelectedColor]);\n\n  const [focused, setFocused] = useState(false);\n  const styles = useStyles({\n    color,\n    variant,\n    value,\n    focused,\n    withPaddingStart: Icon === undefined,\n  });\n\n  const selectRef = useRef<any>(null);\n\n  const openPicker = useCallback(() => {\n    if (Platform.OS === 'android') {\n      selectRef.current?.focus();\n    } else {\n      selectRef.current?.togglePicker(true);\n    }\n  }, []);\n\n  const handleFocus = useCallback(() => {\n    setFocused(true);\n    onFocus?.();\n  }, [onFocus]);\n\n  const handleBlur = useCallback(() => {\n    setFocused(false);\n    onBlur?.();\n  }, [onBlur]);\n\n  return (\n    <View style={[styles.container, style]}>\n      {Icon ? (\n        <TouchableWithoutFeedback onPress={() => openPicker()}>\n          <View style={styles.iconContainer}>\n            <Icon size={styles.icon.fontSize} stroke={styles.icon.color} />\n          </View>\n        </TouchableWithoutFeedback>\n      ) : null}\n      <View style={styles.selectContainer}>\n        <SelectBase\n          ref={Platform.OS === 'android' ? undefined : selectRef}\n          pickerProps={{\n            ...pickerProps,\n            // @ts-ignore\n            ref: Platform.OS === 'android' ? selectRef : undefined,\n            onFocus: handleFocus,\n            onBlur: handleBlur,\n          }}\n          useNativeAndroidPickerStyle={false}\n          style={{\n            inputAndroid: styles.input,\n            inputIOS: styles.input,\n            placeholder: styles.placeholder,\n          }}\n          items={items}\n          onValueChange={onValueChange}\n          value={value}\n          placeholder={placeholder}\n          {...props}\n        />\n      </View>\n      <TouchableWithoutFeedback onPress={() => openPicker()}>\n        <View style={styles.iconContainer}>\n          <ChevronDown\n            size={styles.icon.fontSize}\n            stroke={focused ? styles.icon.color : styles.placeholder.color}\n          />\n        </View>\n      </TouchableWithoutFeedback>\n    </View>\n  );\n}\n\nexport default Select;\n"]}