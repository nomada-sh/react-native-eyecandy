{"version":3,"sources":["DatePicker.tsx"],"names":["DatePicker","date","onDateChange","locale","disableCloseOnSelect","doneText","backText","todayText","width","Dimensions","get","current","tab","setTab","yearMonthSelectionStep","setYearMonthSelectionStep","visible","setVisible","onClose","onPress","onGoToYears","onGoToMonths","handleDateChange","content","formattedDate","doneButtonText","onDonePress","undefined","CalendarEvent","padding","defaultProps","Date","styles","StyleSheet","create","tabsContainer","flexDirection","flex","height","marginHorizontal","tabButton","React","memo"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Dimensions, StyleSheet, View } from 'react-native';\n\nimport Calendar from './Calendar';\nimport BottomSheet from '../BottomSheetV2';\nimport Button from '../Button';\n// TODO: Create Button with input styles.\nimport LinkButton from '../LinkButton';\nimport IconButton from '../IconButton';\nimport { CalendarEvent, ArrowLeft } from '@nomada-sh/react-native-eyecandy-icons';\nimport formatDate from './formatDate';\nexport interface DatePickerProps {\n  date: Date; // = new Date();\n  locale: string; // = 'en-US';\n  onDateChange?: (date: Date) => void;\n  disableCloseOnSelect?: boolean;\n  doneText: string;\n  backText: string;\n  todayText: string;\n}\n\nfunction DatePicker({\n  date,\n  onDateChange,\n  locale,\n  disableCloseOnSelect,\n  doneText,\n  backText,\n  todayText,\n}: DatePickerProps) {\n  // TODO: Listen to changes in width.\n  const width = useRef(Dimensions.get('window').width).current;\n\n  const [tab, setTab] = useState<'date' | 'time'>('date');\n\n  const [yearMonthSelectionStep, setYearMonthSelectionStep] = useState<\n    'year' | 'month' | undefined\n  >();\n\n  const [visible, setVisible] = useState(false);\n  const onClose = useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  const onPress = useCallback(() => {\n    setVisible(true);\n  }, []);\n\n  const onGoToYears = useCallback(() => {\n    setYearMonthSelectionStep('year');\n  }, []);\n\n  const onGoToMonths = useCallback(() => {\n    setYearMonthSelectionStep('month');\n  }, []);\n\n  const handleDateChange = useCallback(\n    (date: Date) => {\n      onDateChange?.(date);\n      if (!disableCloseOnSelect) onClose();\n    },\n    [onDateChange, disableCloseOnSelect, onClose],\n  );\n\n  const content = useMemo(() => {\n    return (\n      <Calendar\n        width={width}\n        locale={locale}\n        date={date}\n        onDateChange={handleDateChange}\n        onGoToYears={onGoToYears}\n        onGoToMonths={onGoToMonths}\n        yearMonthSelectionStep={yearMonthSelectionStep}\n        setYearMonthSelectionStep={setYearMonthSelectionStep}\n        todayText={todayText}\n      />\n    );\n  }, [\n    date,\n    handleDateChange,\n    locale,\n    onGoToMonths,\n    onGoToYears,\n    todayText,\n    width,\n    yearMonthSelectionStep,\n  ]);\n\n  const formattedDate = useMemo(\n    () => formatDate(date, 'PPP', locale),\n    [date, locale],\n  );\n\n  const doneButtonText = useMemo(() => {\n    return yearMonthSelectionStep ? backText : doneText;\n  }, [backText, doneText, yearMonthSelectionStep]);\n\n  const onDonePress = useCallback(() => {\n    if (yearMonthSelectionStep) setYearMonthSelectionStep(undefined);\n    else setVisible(false);\n  }, [yearMonthSelectionStep]);\n\n  useEffect(() => {\n    if (visible) setYearMonthSelectionStep(undefined);\n  }, [visible]);\n\n  return (\n    <View>\n      <LinkButton\n        icon={CalendarEvent}\n        onPress={onPress}\n        text={formattedDate}\n        showChevron={false}\n        bold\n        focused={visible}\n      />\n      <BottomSheet\n        height={disableCloseOnSelect ? 410 : 350}\n        visible={visible}\n        onClose={onClose}\n      >\n        {/* {yearMonthSelectionStep === undefined ? (\n          <View style={styles.tabsContainer}>\n            <Button\n              text=\"Date\"\n              color=\"primary\"\n              variant=\"rounded\"\n              fullwidth={false}\n              style={styles.tab}\n              onPress={() => setTab('date')}\n            />\n            <Button\n              text=\"Time\"\n              variant=\"rounded\"\n              fullwidth={false}\n              style={styles.tab}\n              buttonStyle={styles.tabButton}\n              onPress={() => setTab('time')}\n            />\n          </View>\n        ) : null} */}\n        {content}\n        {disableCloseOnSelect ? (\n          <View\n            style={{\n              padding: 10,\n            }}\n          >\n            <Button\n              color=\"primary\"\n              text={doneButtonText}\n              onPress={onDonePress}\n            />\n          </View>\n        ) : null}\n      </BottomSheet>\n    </View>\n  );\n}\n\nDatePicker.defaultProps = {\n  date: new Date(),\n  locale: 'en-US',\n  doneText: 'Done',\n  backText: 'Back',\n  todayText: 'Today',\n};\n\nconst styles = StyleSheet.create({\n  tabsContainer: {\n    flexDirection: 'row',\n    padding: 10,\n  },\n  tab: {\n    flex: 1,\n    height: 45,\n    marginHorizontal: 10,\n  },\n  tabButton: {},\n});\n\nexport default React.memo(DatePicker);\n"]}