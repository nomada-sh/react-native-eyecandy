{"version":3,"sources":["Days.tsx"],"names":["Days","debug","data","onDayPress","selectedDate","month","year","count","console","log","current","isDateSelected","value","selected","day","styles","container","map","index","StyleSheet","create","flexDirection","flexWrap","height","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;AAIA;;;;;;;;AAWA,SAASA,IAAT,OAOc;AAAA,MAPA;AACZC,IAAAA,KADY;AAEZC,IAAAA,IAAI,GAAG,EAFK;AAGZC,IAAAA,UAHY;AAIZC,IAAAA,YAJY;AAKZC,IAAAA,KALY;AAMZC,IAAAA;AANY,GAOA;AACZ,QAAMC,KAAK,GAAG,mBAAO,CAAP,CAAd;AACAN,EAAAA,KAAK,IACHO,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAqB,GAAEJ,KAAM,IAAGC,IAAK,GAArC,EAAyC,eAAzC,EAA0DC,KAAK,CAACG,OAAN,EAA1D,CADF;AAGA,QAAMC,cAAc,GAAG,wBACpBC,KAAD,IAAyB;AACvB,QAAI,CAACR,YAAL,EAAmB,OAAO,KAAP;AAEnB,UAAMS,QAAQ,GACZT,YAAY,CAACE,IAAb,KAAsBM,KAAK,CAACN,IAA5B,IACAF,YAAY,CAACC,KAAb,KAAuBO,KAAK,CAACP,KAD7B,IAEAD,YAAY,CAACU,GAAb,KAAqBF,KAAK,CAACE,GAH7B;AAKA,WAAOD,QAAP;AACD,GAVoB,EAWrB,CAACT,YAAD,CAXqB,CAAvB;AAcA,sBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEW,MAAM,CAACC;AAApB,KACGd,IAAI,CAACe,GAAL,CAAS,CAACH,GAAD,EAAMI,KAAN,KAAgB;AACxB,UAAML,QAAQ,GAAGC,GAAG,GAAGH,cAAc,CAACG,GAAD,CAAjB,GAAyB,KAA7C;AACA,wBACE,6BAAC,YAAD;AACE,MAAA,OAAO,EAAEX,UADX;AAEE,MAAA,GAAG,EAAEe,KAFP;AAGE,MAAA,KAAK,EAAEJ,GAHT;AAIE,MAAA,QAAQ,EAAED;AAJZ,MADF;AAQD,GAVA,CADH,CADF;AAeD;;AAED,MAAME,MAAM,GAAGI,wBAAWC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,aAAa,EAAE,KADN;AAETC,IAAAA,QAAQ,EAAE,MAFD;AAGTC,IAAAA,MAAM,EAAE,KAAK;AAHJ;AADoB,CAAlB,CAAf;;4BAQeC,eAAMC,IAAN,CAAWzB,IAAX,C","sourcesContent":["import React, { useCallback, useRef } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport type { CalendarDate } from 'calendar-base';\n\nimport Day from '../Day';\n\nexport interface DaysProps {\n  data?: Array<false | CalendarDate>;\n  onDayPress?: (value: CalendarDate) => void;\n  selectedDate?: CalendarDate;\n  year: number;\n  month: number;\n  debug?: boolean;\n}\n\nfunction Days({\n  debug,\n  data = [],\n  onDayPress,\n  selectedDate,\n  month,\n  year,\n}: DaysProps) {\n  const count = useRef(1);\n  debug &&\n    console.log('DAYS', `${month}/${year},`, 'RENDER COUNT:', count.current++);\n\n  const isDateSelected = useCallback(\n    (value: CalendarDate) => {\n      if (!selectedDate) return false;\n\n      const selected =\n        selectedDate.year === value.year &&\n        selectedDate.month === value.month &&\n        selectedDate.day === value.day;\n\n      return selected;\n    },\n    [selectedDate],\n  );\n\n  return (\n    <View style={styles.container}>\n      {data.map((day, index) => {\n        const selected = day ? isDateSelected(day) : false;\n        return (\n          <Day\n            onPress={onDayPress}\n            key={index}\n            value={day}\n            selected={selected}\n          />\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    height: 40 * 6,\n  },\n});\n\nexport default React.memo(Days);\n"]}