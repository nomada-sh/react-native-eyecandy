{"version":3,"sources":["Day.tsx"],"names":["Day","value","onPress","selected","debug","palette","dark","colors","today","now","Date","year","getFullYear","month","getMonth","day","getDate","rippleColor","primary","background","default","container","backgroundColor","grey","textColor","text","normal","count","console","log","current","styles","pressable","pressableHidden","color","string","borderless","radius","StyleSheet","create","width","alignItems","overflow","height","borderRadius","justifyContent","opacity","React","memo"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef } from 'react';\nimport { Pressable, StyleSheet, View } from 'react-native';\n\nimport type { CalendarDate } from 'calendar-base';\n\nimport { Body } from '../../../../typography';\nimport {useTheme} from '@nomada-sh/react-native-eyecandy-theme'\nimport { useRippleColor } from '../../../../hooks';\n\nexport interface DayProps {\n  value: CalendarDate | false;\n  onPress?: (value: CalendarDate) => void;\n  selected?: boolean;\n  debug?: boolean;\n}\n\nfunction Day({ value, onPress, selected, debug }: DayProps) {\n  const { palette, dark, colors } = useTheme();\n\n  const today = useMemo(() => {\n    if (!value) return false;\n\n    const now = new Date();\n\n    return (\n      value.year === now.getFullYear() &&\n      value.month === now.getMonth() &&\n      value.day === now.getDate()\n    );\n  }, [value]);\n\n  const rippleColor = useRippleColor(\n    selected ? palette.primary[500] : colors.background.default.container\n  );\n\n  const backgroundColor = useMemo(() => {\n    if (selected) return palette.primary[500];\n    if (today) return palette.grey[dark ? 800 : 200];\n    return 'transparent';\n  }, [dark, palette.grey, palette.primary, selected, today]);\n\n  const textColor = useMemo(() => {\n    if (selected) return 'white';\n    if (today) return palette.primary[500];\n    return colors.text.default.normal;\n  }, [colors.text.default.normal, palette.primary, selected, today]);\n\n  const count = useRef(1);\n  value &&\n    debug &&\n    console.log(\n      'DAY',\n      `${value.year}/${value.month}/${value.day}`,\n      'RENDER COUNT:',\n      count.current++,\n    );\n\n  return (\n    <View style={styles.container}>\n      <Pressable\n        style={[\n          value !== false ? styles.pressable : styles.pressableHidden,\n          {\n            backgroundColor: backgroundColor,\n          },\n        ]}\n        disabled={value === false}\n        onPress={() => {\n          if (value !== false && onPress) onPress(value);\n        }}\n        android_ripple={{\n          color: rippleColor.string(),\n          borderless: true,\n          radius: 20,\n        }}\n      >\n        <Body\n          color=\"default\"\n          weight={selected ? 'bold' : 'normal'}\n          style={{\n            color: textColor,\n          }}\n        >\n          {value !== false ? value.day : '00'}\n        </Body>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '14.28%',\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  pressable: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  pressableHidden: {\n    opacity: 0,\n  },\n});\n\nexport default React.memo(Day);\n"]}