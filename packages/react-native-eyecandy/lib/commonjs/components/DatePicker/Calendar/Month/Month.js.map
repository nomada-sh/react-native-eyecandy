{"version":3,"sources":["Month.tsx"],"names":["Month","month","year","getCalendar","locale","selectedDate","selectedDateProp","width","index","onPressDay","onPressYear","onPressMonth","onPressToday","x","size","todayText","days","getFullYear","getMonth","day","getDate","date","Date","style","newX","value","translateX","transform","position"],"mappings":";;;;;;;AAAA;;AAEA;;AAOA;;AACA;;AACA;;AACA;;;;;;;;AAmBA,SAASA,KAAT,OAee;AAAA,MAfA;AACbC,IAAAA,KADa;AAEbC,IAAAA,IAFa;AAGbC,IAAAA,WAHa;AAIbC,IAAAA,MAJa;AAKbC,IAAAA,YAAY,EAAEC,gBALD;AAMbC,IAAAA,KANa;AAObC,IAAAA,KAPa;AAQbC,IAAAA,UARa;AASbC,IAAAA,WATa;AAUbC,IAAAA,YAVa;AAWbC,IAAAA,YAXa;AAYbC,IAAAA,CAZa;AAabC,IAAAA,IAba;AAcbC,IAAAA;AAda,GAeA;AACb,QAAMC,IAAI,GAAG,oBACX,MAAMb,WAAW,CAACD,IAAD,EAAOD,KAAP,CADN,EAEX,CAACE,WAAD,EAAcD,IAAd,EAAoBD,KAApB,CAFW,CAAb;AAKA,QAAMI,YAAY,GAAG,oBACnB,OAAO;AACLH,IAAAA,IAAI,EAAEI,gBAAgB,CAACW,WAAjB,EADD;AAELhB,IAAAA,KAAK,EAAEK,gBAAgB,CAACY,QAAjB,EAFF;AAGLC,IAAAA,GAAG,EAAEb,gBAAgB,CAACc,OAAjB;AAHA,GAAP,CADmB,EAMnB,CAACd,gBAAD,CANmB,CAArB;AASA,QAAMe,IAAI,GAAG,oBAAQ,MAAM,IAAIC,IAAJ,CAASpB,IAAT,EAAeD,KAAf,CAAd,EAAqC,CAACA,KAAD,EAAQC,IAAR,CAArC,CAAb;AAEA,QAAMqB,KAAK,GAAG,6CAAiB,MAAM;AACnC,UAAMC,IAAI,GAAG,mBAAKjB,KAAK,GAAGO,IAAb,EAAmBD,CAAC,CAACY,KAArB,IAA8BjB,KAAK,GAAGD,KAAnD;AAEA,QAAImB,UAAU,GAAGF,IAAI,GAAGjB,KAAK,IAAIO,IAAI,GAAG,CAAX,CAA7B;AACA,QAAIU,IAAI,IAAI,CAAR,IAAaA,IAAI,IAAIjB,KAAK,GAAGO,IAAjC,EAAuCY,UAAU,GAAGF,IAAI,GAAGjB,KAApB;AAEvC,WAAO;AACLoB,MAAAA,SAAS,EAAE,CAAC;AAAED,QAAAA;AAAF,OAAD;AADN,KAAP;AAGD,GATa,EASX,CAACb,CAAD,EAAIL,KAAJ,EAAWD,KAAX,CATW,CAAd;AAWA,sBACE,6BAAC,8BAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACL;AACEA,MAAAA,KADF;AAEEqB,MAAAA,QAAQ,EAAE;AAFZ,KADK,EAKLL,KALK,CADT;AAQE,IAAA,GAAG,EAAG,GAAErB,IAAK,IAAGD,KAAM;AARxB,kBAUE,6BAAC,gBAAD;AACE,IAAA,IAAI,EAAEoB,IADR;AAEE,IAAA,WAAW,EAAEX,WAFf;AAGE,IAAA,YAAY,EAAEC,YAHhB;AAIE,IAAA,YAAY,EAAEC,YAJhB;AAKE,IAAA,MAAM,EAAER,MALV;AAME,IAAA,SAAS,EAAEW;AANb,IAVF,eAkBE,6BAAC,eAAD;AAAQ,IAAA,MAAM,EAAEX,MAAhB;AAAwB,IAAA,KAAK,EAAEH,KAA/B;AAAsC,IAAA,IAAI,EAAEC;AAA5C,IAlBF,eAmBE,6BAAC,aAAD;AACE,IAAA,IAAI,EAAEc,IADR;AAEE,IAAA,UAAU,EAAEP,UAFd;AAGE,IAAA,YAAY,EAAEJ,YAHhB;AAIE,IAAA,KAAK,EAAEJ,KAJT;AAKE,IAAA,IAAI,EAAEC;AALR,IAnBF,CADF;AA6BD;;eAEcF,K","sourcesContent":["import React, { useMemo } from 'react';\n\nimport Animated, {\n  SharedValue,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nimport type { CalendarDate } from 'calendar-base';\n\nimport Header from '../Header';\nimport Actions from '../Actions';\nimport Days from '../Days';\nimport wrap from '../../wrap';\n\nexport interface MonthProps {\n  month: number;\n  year: number;\n  getCalendar: (year: number, month: number) => (false | CalendarDate)[];\n  locale?: string;\n  selectedDate: Date;\n  width: number;\n  index: number;\n  onPressDay: (value: CalendarDate) => void;\n  onPressYear: () => void;\n  onPressMonth: () => void;\n  onPressToday: () => void;\n  x: SharedValue<number>;\n  size: number;\n  todayText?: string;\n}\n\nfunction Month({\n  month,\n  year,\n  getCalendar,\n  locale,\n  selectedDate: selectedDateProp,\n  width,\n  index,\n  onPressDay,\n  onPressYear,\n  onPressMonth,\n  onPressToday,\n  x,\n  size,\n  todayText,\n}: MonthProps) {\n  const days = useMemo(\n    () => getCalendar(year, month),\n    [getCalendar, year, month],\n  );\n\n  const selectedDate = useMemo(\n    () => ({\n      year: selectedDateProp.getFullYear(),\n      month: selectedDateProp.getMonth(),\n      day: selectedDateProp.getDate(),\n    }),\n    [selectedDateProp],\n  );\n\n  const date = useMemo(() => new Date(year, month), [month, year]);\n\n  const style = useAnimatedStyle(() => {\n    const newX = wrap(width * size, x.value) + index * width;\n\n    let translateX = newX - width * (size + 1);\n    if (newX >= 0 && newX <= width * size) translateX = newX - width;\n\n    return {\n      transform: [{ translateX }],\n    };\n  }, [x, index, width]);\n\n  return (\n    <Animated.View\n      style={[\n        {\n          width,\n          position: 'absolute',\n        },\n        style,\n      ]}\n      key={`${year}-${month}`}\n    >\n      <Actions\n        date={date}\n        onPressYear={onPressYear}\n        onPressMonth={onPressMonth}\n        onPressToday={onPressToday}\n        locale={locale}\n        todayText={todayText}\n      />\n      <Header locale={locale} month={month} year={year} />\n      <Days\n        data={days}\n        onDayPress={onPressDay}\n        selectedDate={selectedDate}\n        month={month}\n        year={year}\n      />\n    </Animated.View>\n  );\n}\n\nexport default Month;\n"]}