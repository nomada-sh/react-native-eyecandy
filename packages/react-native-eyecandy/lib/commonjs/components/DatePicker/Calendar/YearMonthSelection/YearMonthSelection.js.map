{"version":3,"sources":["YearMonthSelection.tsx"],"names":["YEARS","YearMonthSelection","step","date","visibleDate","locale","onChange","goToYears","selectedDate","setStep","yearSelected","monthSelected","getFullYear","getMonth","yearNow","monthNow","now","Date","initialYear","initialMonth","year","setYear","formatMonth","month","initialYearIndexRef","years","i","group","j","y","current","length","push","months","name","styles","container","_","index","offset","flatlist","paddingTop","toString","item","flexDirection","map","yearButton","titleContainer","m","defaultProps","StyleSheet","create","flex","padding","width","height","paddingBottom","alignItems","React","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { FlatList } from 'react-native-gesture-handler';\n\nimport Button from '../../../Button';\nimport { Body } from '../../../../typography';\nimport { useUpdateEffect } from 'react-use';\nimport formatDate from '../../formatDate';\n\nexport interface YearMonthSelectionProps {\n  step?: 'year' | 'month';\n  onChange?: (date: Date) => void;\n  goToYears?: () => void;\n  locale: string;\n  date: Date;\n  selectedDate: Date;\n  setStep?: (step: 'year' | 'month' | undefined) => void;\n}\n\nconst YEARS = 50;\n\nfunction YearMonthSelection({\n  step,\n  date: visibleDate,\n  locale,\n  onChange,\n  goToYears,\n  selectedDate,\n  setStep,\n}: YearMonthSelectionProps) {\n  const { yearSelected, monthSelected } = useMemo(() => {\n    return {\n      yearSelected: selectedDate.getFullYear(),\n      monthSelected: selectedDate.getMonth(),\n    };\n  }, [selectedDate]);\n\n  const { yearNow, monthNow } = useMemo(() => {\n    const now = new Date();\n    return {\n      yearNow: now.getFullYear(),\n      monthNow: now.getMonth(),\n    };\n  }, []);\n\n  const { initialYear } = useMemo(() => {\n    return {\n      initialYear: visibleDate.getFullYear(),\n      initialMonth: visibleDate.getMonth(),\n    };\n  }, [visibleDate]);\n\n  const [year, setYear] = useState(initialYear);\n\n  const formatMonth = useCallback(\n    (month: number) => {\n      return formatDate(new Date(initialYear, month, 1), 'MMMM', locale);\n    },\n    [locale, initialYear],\n  );\n\n  const initialYearIndexRef = useRef(0);\n\n  const years = useMemo(() => {\n    const years: number[][] = [];\n    for (let i = initialYear - YEARS; i <= initialYear + YEARS; i += 4) {\n      const group: number[] = [];\n      for (let j = 0; j < 4; j++) {\n        const y = i + j;\n        if (y === initialYear) initialYearIndexRef.current = years.length - 2;\n        group.push(y);\n      }\n      years.push(group);\n    }\n    return years;\n  }, [initialYear]);\n\n  const months = useMemo(() => {\n    const months: Array<Array<{ month: number; name: string }>> = [];\n\n    for (let i = 0; i < 4; i++) {\n      const group = [];\n\n      for (let j = 0; j < 3; j++)\n        group.push({\n          month: i * 3 + j,\n          name: formatMonth(i * 3 + j),\n        });\n\n      months.push(group);\n    }\n    return months;\n  }, [formatMonth]);\n\n  useUpdateEffect(() => {\n    setYear(initialYear);\n  }, [initialYear]);\n\n  if (step === 'year')\n    return (\n      <View style={styles.container}>\n        <FlatList\n          initialScrollIndex={initialYearIndexRef.current}\n          getItemLayout={(_, index) => ({\n            length: 55,\n            offset: 55 * index,\n            index,\n          })}\n          contentContainerStyle={[\n            styles.flatlist,\n            {\n              paddingTop: 0,\n            },\n          ]}\n          data={years}\n          keyExtractor={(_, index) => index.toString()}\n          renderItem={({ item }) => {\n            return (\n              <View style={{ flexDirection: 'row' }}>\n                {item.map(y => (\n                  <View key={y} style={styles.year}>\n                    <Button\n                      style={styles.yearButton}\n                      //onPress={() => onPressYear?.(new Date(y, month))}\n                      onPress={() => {\n                        setYear(y);\n                        setStep?.('month');\n                      }}\n                      color={\n                        y === yearSelected || y === yearNow\n                          ? 'primary'\n                          : 'default'\n                      }\n                      inverse={y === yearNow && y !== yearSelected}\n                      text={y.toString()}\n                    />\n                  </View>\n                ))}\n              </View>\n            );\n          }}\n          showsVerticalScrollIndicator={false}\n        />\n      </View>\n    );\n\n  if (step === 'month')\n    return (\n      <View style={styles.container}>\n        <View style={styles.titleContainer}>\n          <Body onPress={goToYears} size=\"xlarge\" color=\"primary\" weight=\"bold\">\n            {year}\n          </Body>\n        </View>\n        <FlatList\n          contentContainerStyle={styles.flatlist}\n          data={months}\n          keyExtractor={(_, index) => index.toString()}\n          renderItem={({ item }) => {\n            return (\n              <View style={{ flexDirection: 'row' }}>\n                {item.map(({ month: m, name }) => (\n                  <View key={name} style={styles.month}>\n                    <Button\n                      onPress={() => onChange?.(new Date(year, m))}\n                      color={\n                        (m === monthSelected && year === yearSelected) ||\n                        (m === monthNow && year === yearNow)\n                          ? 'primary'\n                          : 'default'\n                      }\n                      inverse={\n                        m === monthNow &&\n                        year === yearNow &&\n                        m !== monthSelected\n                      }\n                      text={name}\n                    />\n                  </View>\n                ))}\n              </View>\n            );\n          }}\n          showsVerticalScrollIndicator={false}\n        />\n      </View>\n    );\n\n  return null;\n}\n\nYearMonthSelection.defaultProps = {\n  locale: 'en-US',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  flatlist: {\n    padding: 10,\n  },\n  month: {\n    padding: 6,\n    width: '33%',\n  },\n  year: {\n    padding: 6,\n    width: '25%',\n    height: 55,\n  },\n  yearButton: {\n    height: 55 - 12,\n  },\n  titleContainer: {\n    padding: 16,\n    paddingBottom: 0,\n    alignItems: 'center',\n  },\n});\n\nexport default React.memo(YearMonthSelection);\n"]}