{"version":3,"sources":["BaseButton.tsx"],"names":["BaseButton","children","style","buttonStyle","inverse","color","variant","height","fullwidth","disabled","disabledProp","loading","styles","customStyles","hideDisabledOverlay","props","getButtonStyle","button","container","ripple","loadingContainer"],"mappings":";;;;;;;AAAA;;AACA;;AASA;;AAEA;;;;;;;;;;AA+BA,SAASA,UAAT,OAcoB;AAAA,MAdA;AAClBC,IAAAA,QADkB;AAElBC,IAAAA,KAFkB;AAGlBC,IAAAA,WAHkB;AAIlBC,IAAAA,OAJkB;AAKlBC,IAAAA,KALkB;AAMlBC,IAAAA,OANkB;AAOlBC,IAAAA,MAPkB;AAQlBC,IAAAA,SARkB;AASlBC,IAAAA,QAAQ,EAAEC,YATQ;AAUlBC,IAAAA,OAVkB;AAWlBC,IAAAA,MAAM,EAAEC,YAAY,GAAG,EAXL;AAYlBC,IAAAA,mBAZkB;AAalB,OAAGC;AAbe,GAcA;AAClB,QAAMN,QAAQ,GAAG,oBACf,MAAMC,YAAY,IAAIC,OADP,EAEf,CAACD,YAAD,EAAeC,OAAf,CAFe,CAAjB;AAKA,QAAMC,MAAM,GAAG,wBAAU;AACvBP,IAAAA,KADuB;AAEvBD,IAAAA,OAFuB;AAGvBE,IAAAA,OAHuB;AAIvBC,IAAAA,MAJuB;AAKvBE,IAAAA,QALuB;AAMvBD,IAAAA;AANuB,GAAV,CAAf;AASA,QAAMQ,cAAc,GAAG,+BAAmB,CACxCJ,MAAM,CAACK,MADiC,EAExCd,WAFwC,EAGxCU,YAAY,CAACI,MAH2B,CAAnB,CAAvB;AAMA,sBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACL,MAAM,CAACM,SAAR,EAAmBhB,KAAnB,EAA0BW,YAAY,CAACK,SAAvC;AAAb,kBACE,6BAAC,sBAAD;AACE,IAAA,KAAK,EAAEF,cADT;AAEE,IAAA,cAAc,EAAE;AACdX,MAAAA,KAAK,EAAEO,MAAM,CAACO,MAAP,CAAcd;AADP,KAFlB;AAKE,IAAA,QAAQ,EAAEI;AALZ,KAMMM,KANN,GAQGd,QARH,CADF,EAWGQ,QAAQ,IAAI,CAACK,mBAAb,gBACC,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEF,MAAM,CAACH;AAApB,IADD,GAEG,IAbN,EAcGE,OAAO,gBACN,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACQ;AAApB,kBACE,6BAAC,8BAAD;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAER,MAAM,CAACD,OAAP,CAAeN;AAAtD,IADF,CADM,GAIJ,IAlBN,CADF;AAsBD;;eAEcL,U","sourcesContent":["import React, { ReactNode, useMemo } from 'react';\nimport {\n  ActivityIndicator,\n  Pressable,\n  PressableProps,\n  StyleProp,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { usePressableStyles } from '../../hooks';\nimport type { ThemeButtonColorChoices } from '@nomada-sh/react-native-eyecandy-theme';\nimport useStyles from './useStyles';\n\nexport interface BaseButtonProps extends PressableProps {\n  children?: ReactNode;\n  /**\n   * Container view style.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Pressable style.\n   */\n  buttonStyle?: PressableProps['style'];\n  inverse?: boolean;\n  color?: ThemeButtonColorChoices;\n  styles?: {\n    /**\n     * Container view style (Applied after style).\n     */\n    container?: StyleProp<ViewStyle>;\n    /**\n     * Pressable style (Applied after buttonStyle).\n     */\n    button?: PressableProps['style'];\n  };\n  variant?: 'default' | 'outlined' | 'rounded' | 'transparent-rounded';\n  height?: number;\n  fullwidth?: boolean;\n  loading?: boolean;\n  hideDisabledOverlay?: boolean;\n}\n\nfunction BaseButton({\n  children,\n  style,\n  buttonStyle,\n  inverse,\n  color,\n  variant,\n  height,\n  fullwidth,\n  disabled: disabledProp,\n  loading,\n  styles: customStyles = {},\n  hideDisabledOverlay,\n  ...props\n}: BaseButtonProps) {\n  const disabled = useMemo(\n    () => disabledProp || loading,\n    [disabledProp, loading],\n  );\n\n  const styles = useStyles({\n    color,\n    inverse,\n    variant,\n    height,\n    disabled,\n    fullwidth,\n  });\n\n  const getButtonStyle = usePressableStyles([\n    styles.button,\n    buttonStyle,\n    customStyles.button,\n  ]);\n\n  return (\n    <View style={[styles.container, style, customStyles.container]}>\n      <Pressable\n        style={getButtonStyle}\n        android_ripple={{\n          color: styles.ripple.color,\n        }}\n        disabled={disabled}\n        {...props}\n      >\n        {children}\n      </Pressable>\n      {disabled && !hideDisabledOverlay ? (\n        <View style={styles.disabled} />\n      ) : null}\n      {loading ? (\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color={styles.loading.color} />\n        </View>\n      ) : null}\n    </View>\n  );\n}\n\nexport default BaseButton;\n"]}