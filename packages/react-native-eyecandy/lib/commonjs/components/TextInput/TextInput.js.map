{"version":3,"sources":["TextInput.tsx"],"names":["TextInput","startIcon","StartIcon","endIcon","EndIcon","onPressAction","style","inputStyle","secureTextEntry","secureTextEntryProp","showSecureTextEntryToggle","onSecureTextEntryChange","color","value","defaultValue","onFocus","onBlur","inputRef","inputRefProp","error","errors","required","fullWidth","placeholder","placeholderProp","props","focused","handleBlur","handleFocus","onPressIcon","onPressSecureTextEntryToggle","hasError","styles","keyboardAppearance","renderIcon","widthPaddingStart","undefined","widthPaddingEnd","container","inputContainer","iconContainer","inputPlaceholder","input","EyeOff","EyeCheck"],"mappings":";;;;;;;AAAA;;AACA;;AAMA;;AACA;;AAGA;;AACA;;;;;;AAEe,SAASA,SAAT,OAqBI;AAAA,MArBe;AAChCC,IAAAA,SAAS,EAAEC,SADqB;AAEhCC,IAAAA,OAAO,EAAEC,OAFuB;AAGhCC,IAAAA,aAHgC;AAIhCC,IAAAA,KAJgC;AAKhCC,IAAAA,UALgC;AAMhCC,IAAAA,eAAe,EAAEC,mBANe;AAOhCC,IAAAA,yBAPgC;AAQhCC,IAAAA,uBAAuB,GAAG,MAAM,CAAE,CARF;AAShCC,IAAAA,KAAK,GAAG,SATwB;AAUhCC,IAAAA,KAVgC;AAWhCC,IAAAA,YAXgC;AAYhCC,IAAAA,OAAO,EAAEA,OAZuB;AAahCC,IAAAA,MAAM,EAAEA,MAbwB;AAchCC,IAAAA,QAAQ,EAAEC,YAdsB;AAehCC,IAAAA,KAfgC;AAgBhCC,IAAAA,MAhBgC;AAiBhCC,IAAAA,QAjBgC;AAkBhCC,IAAAA,SAlBgC;AAmBhCC,IAAAA,WAAW,EAAEC,eAnBmB;AAoBhC,OAAGC;AApB6B,GAqBf;AACjB,QAAM;AACJR,IAAAA,QADI;AAEJS,IAAAA,OAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,4BANI;AAOJtB,IAAAA,eAPI;AAQJuB,IAAAA,QARI;AASJR,IAAAA;AATI,MAUF,2BAAa;AACfP,IAAAA,MADe;AAEfD,IAAAA,OAFe;AAGfJ,IAAAA,uBAHe;AAIfH,IAAAA,eAAe,EAAEC,mBAJF;AAKfQ,IAAAA,QAAQ,EAAEC,YALK;AAMfC,IAAAA,KANe;AAOfC,IAAAA,MAPe;AAQfC,IAAAA,QARe;AASfE,IAAAA,WAAW,EAAEC;AATE,GAAb,CAVJ;AAsBA,QAAM;AAAEQ,IAAAA,MAAF;AAAUC,IAAAA,kBAAV;AAA8BC,IAAAA;AAA9B,MAA6C,wBAAU;AAC3DtB,IAAAA,KAD2D;AAE3Dc,IAAAA,OAF2D;AAG3DS,IAAAA,iBAAiB,EAAEjC,SAAS,KAAKkC,SAH0B;AAI3DC,IAAAA,eAAe,EAAE,CAAC3B,yBAAD,IAA8BN,OAAO,KAAKgC,SAJA;AAK3DvB,IAAAA,KAAK,EAAEA,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAWC,YAL2C;AAM3DiB,IAAAA,QAN2D;AAO3DT,IAAAA;AAP2D,GAAV,CAAnD;AAUA,sBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACU,MAAM,CAACM,SAAR,EAAmBhC,KAAnB;AAAb,kBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAAC0B,MAAM,CAACO,cAAR;AAAb,KACGrC,SAAS,gBACR,6BAAC,qCAAD;AAA0B,IAAA,OAAO,EAAE,MAAM2B,WAAW;AAApD,kBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACQ;AAApB,KAAoCN,UAAU,CAAChC,SAAD,CAA9C,CADF,CADQ,GAIN,IALN,eAME,6BAAC,sBAAD;AACE,IAAA,OAAO,EAAE0B,WADX;AAEE,IAAA,MAAM,EAAED,UAFV;AAGE,IAAA,eAAe,EAAEnB,eAHnB;AAIE,IAAA,GAAG,EAAES,QAJP;AAKE,IAAA,oBAAoB,EAAEe,MAAM,CAACS,gBAAP,CAAwB7B,KALhD;AAME,IAAA,WAAW,EAAEW,WANf;AAOE,IAAA,KAAK,EAAEV,KAPT;AAQE,IAAA,YAAY,EAAEC,YARhB;AASE,IAAA,KAAK,EAAE,CAACkB,MAAM,CAACU,KAAR,EAAenC,UAAf,CATT;AAUE,IAAA,kBAAkB,EAAE0B,kBAVtB;AAWE,IAAA,mBAAmB;AAXrB,KAYMR,KAZN,EANF,EAoBGrB,OAAO,gBACN,6BAAC,qCAAD;AAA0B,IAAA,OAAO,EAAE,MAAMC,aAAN,aAAMA,aAAN,uBAAMA,aAAa;AAAtD,kBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE2B,MAAM,CAACQ;AAApB,KAAoCN,UAAU,CAAC9B,OAAD,CAA9C,CADF,CADM,GAIJ,IAxBN,EAyBGM,yBAAyB,gBACxB,6BAAC,qCAAD;AACE,IAAA,OAAO,EAAE,MAAMoB,4BAA4B;AAD7C,kBAGE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACQ;AAApB,KACGN,UAAU,CACT1B,eAAe,GAAGmC,gCAAH,GAAYC,kCADlB,EAETZ,MAAM,CAACS,gBAAP,CAAwB7B,KAFf,CADb,CAHF,CADwB,GAWtB,IApCN,CADF,eAuCE,6BAAC,wBAAD;AAAiB,IAAA,KAAK,EAAEO,KAAxB;AAA+B,IAAA,MAAM,EAAEC;AAAvC,IAvCF,CADF;AA2CD","sourcesContent":["import React from 'react';\nimport {\n  TextInput as TextInputBase,\n  View,\n  TouchableWithoutFeedback,\n} from 'react-native';\n\nimport TextInputErrors from '../TextInputErrors';\nimport { EyeCheck, EyeOff } from '@nomada-sh/react-native-eyecandy-icons';\n\nimport type { TextInputProps } from './typings';\nimport useStyles from './useStyles';\nimport useTextInput from './useTextInput';\n\nexport default function TextInput({\n  startIcon: StartIcon,\n  endIcon: EndIcon,\n  onPressAction,\n  style,\n  inputStyle,\n  secureTextEntry: secureTextEntryProp,\n  showSecureTextEntryToggle,\n  onSecureTextEntryChange = () => {},\n  color = 'default',\n  value,\n  defaultValue,\n  onFocus: onFocus,\n  onBlur: onBlur,\n  inputRef: inputRefProp,\n  error,\n  errors,\n  required,\n  fullWidth,\n  placeholder: placeholderProp,\n  ...props\n}: TextInputProps) {\n  const {\n    inputRef,\n    focused,\n    handleBlur,\n    handleFocus,\n    onPressIcon,\n    onPressSecureTextEntryToggle,\n    secureTextEntry,\n    hasError,\n    placeholder,\n  } = useTextInput({\n    onBlur,\n    onFocus,\n    onSecureTextEntryChange,\n    secureTextEntry: secureTextEntryProp,\n    inputRef: inputRefProp,\n    error,\n    errors,\n    required,\n    placeholder: placeholderProp,\n  });\n\n  const { styles, keyboardAppearance, renderIcon } = useStyles({\n    color,\n    focused,\n    widthPaddingStart: StartIcon === undefined,\n    widthPaddingEnd: !showSecureTextEntryToggle && EndIcon === undefined,\n    value: value ?? defaultValue,\n    hasError,\n    fullWidth,\n  });\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.inputContainer]}>\n        {StartIcon ? (\n          <TouchableWithoutFeedback onPress={() => onPressIcon()}>\n            <View style={styles.iconContainer}>{renderIcon(StartIcon)}</View>\n          </TouchableWithoutFeedback>\n        ) : null}\n        <TextInputBase\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          secureTextEntry={secureTextEntry}\n          ref={inputRef}\n          placeholderTextColor={styles.inputPlaceholder.color}\n          placeholder={placeholder}\n          value={value}\n          defaultValue={defaultValue}\n          style={[styles.input, inputStyle]}\n          keyboardAppearance={keyboardAppearance}\n          disableFullscreenUI\n          {...props}\n        />\n        {EndIcon ? (\n          <TouchableWithoutFeedback onPress={() => onPressAction?.()}>\n            <View style={styles.iconContainer}>{renderIcon(EndIcon)}</View>\n          </TouchableWithoutFeedback>\n        ) : null}\n        {showSecureTextEntryToggle ? (\n          <TouchableWithoutFeedback\n            onPress={() => onPressSecureTextEntryToggle()}\n          >\n            <View style={styles.iconContainer}>\n              {renderIcon(\n                secureTextEntry ? EyeOff : EyeCheck,\n                styles.inputPlaceholder.color,\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        ) : null}\n      </View>\n      <TextInputErrors error={error} errors={errors} />\n    </View>\n  );\n}\n"]}