{"version":3,"sources":["Select.tsx"],"names":["React","useCallback","useMemo","useRef","useState","Platform","TouchableWithoutFeedback","View","SelectBase","ChevronDown","useStyles","Select","items","onValueChange","value","color","icon","Icon","onFocus","onBlur","style","variant","pickerProps","placeholder","placeholderProp","androidItemSelectedColor","props","placeholderColor","OS","undefined","label","focused","setFocused","styles","withPaddingStart","selectRef","openPicker","current","focus","togglePicker","handleFocus","handleBlur","container","iconContainer","fontSize","selectContainer","ref","inputAndroid","input","inputIOS"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { Platform, TouchableWithoutFeedback, View } from 'react-native';\n\nimport SelectBase from 'react-native-picker-select';\n\nimport { ChevronDown } from '@nomada-sh/react-native-eyecandy-icons';\n\nimport type { SelectProps } from './typings';\nimport useStyles from './useStyles';\n\nfunction Select<ValueType>({\n  items = [],\n  onValueChange = () => {},\n  value,\n  color,\n  icon: Icon,\n  onFocus,\n  onBlur,\n  style,\n  variant,\n  pickerProps = {},\n  placeholder: placeholderProp = 'Select an item...',\n  androidItemSelectedColor = '#9ea0a4',\n  ...props\n}: SelectProps<ValueType>) {\n  const placeholder = useMemo(() => {\n    let placeholderColor =\n      Platform.OS === 'android' ? androidItemSelectedColor : undefined;\n\n    return {\n      label: placeholderProp,\n      value: null,\n      color: placeholderColor,\n    };\n  }, [placeholderProp, androidItemSelectedColor]);\n\n  const [focused, setFocused] = useState(false);\n  const styles = useStyles({\n    color,\n    variant,\n    value,\n    focused,\n    withPaddingStart: Icon === undefined,\n  });\n\n  const selectRef = useRef<any>(null);\n\n  const openPicker = useCallback(() => {\n    if (Platform.OS === 'android') {\n      selectRef.current?.focus();\n    } else {\n      selectRef.current?.togglePicker(true);\n    }\n  }, []);\n\n  const handleFocus = useCallback(() => {\n    setFocused(true);\n    onFocus?.();\n  }, [onFocus]);\n\n  const handleBlur = useCallback(() => {\n    setFocused(false);\n    onBlur?.();\n  }, [onBlur]);\n\n  return (\n    <View style={[styles.container, style]}>\n      {Icon ? (\n        <TouchableWithoutFeedback onPress={() => openPicker()}>\n          <View style={styles.iconContainer}>\n            <Icon size={styles.icon.fontSize} stroke={styles.icon.color} />\n          </View>\n        </TouchableWithoutFeedback>\n      ) : null}\n      <View style={styles.selectContainer}>\n        <SelectBase\n          ref={Platform.OS === 'android' ? undefined : selectRef}\n          pickerProps={{\n            ...pickerProps,\n            // @ts-ignore\n            ref: Platform.OS === 'android' ? selectRef : undefined,\n            onFocus: handleFocus,\n            onBlur: handleBlur,\n          }}\n          useNativeAndroidPickerStyle={false}\n          style={{\n            inputAndroid: styles.input,\n            inputIOS: styles.input,\n            placeholder: styles.placeholder,\n          }}\n          items={items}\n          onValueChange={onValueChange}\n          value={value}\n          placeholder={placeholder}\n          {...props}\n        />\n      </View>\n      <TouchableWithoutFeedback onPress={() => openPicker()}>\n        <View style={styles.iconContainer}>\n          <ChevronDown\n            size={styles.icon.fontSize}\n            stroke={focused ? styles.icon.color : styles.placeholder.color}\n          />\n        </View>\n      </TouchableWithoutFeedback>\n    </View>\n  );\n}\n\nexport default Select;\n"]}