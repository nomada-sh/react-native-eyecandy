{"version":3,"sources":["DatePicker.tsx"],"names":["React","useCallback","useEffect","useMemo","useRef","useState","Dimensions","StyleSheet","View","Calendar","BottomSheet","Button","LinkButton","CalendarEvent","formatDate","DatePicker","date","onDateChange","locale","disableCloseOnSelect","doneText","backText","todayText","width","get","current","tab","setTab","yearMonthSelectionStep","setYearMonthSelectionStep","visible","setVisible","onClose","onPress","onGoToYears","onGoToMonths","handleDateChange","content","formattedDate","doneButtonText","onDonePress","undefined","padding","defaultProps","Date","styles","create","tabsContainer","flexDirection","flex","height","marginHorizontal","tabButton","memo"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Dimensions, StyleSheet, View } from 'react-native';\n\nimport Calendar from './Calendar';\nimport BottomSheet from '../BottomSheetV2';\nimport Button from '../Button';\n// TODO: Create Button with input styles.\nimport LinkButton from '../LinkButton';\nimport IconButton from '../IconButton';\nimport { CalendarEvent, ArrowLeft } from '@nomada-sh/react-native-eyecandy-icons';\nimport formatDate from './formatDate';\nexport interface DatePickerProps {\n  date: Date; // = new Date();\n  locale: string; // = 'en-US';\n  onDateChange?: (date: Date) => void;\n  disableCloseOnSelect?: boolean;\n  doneText: string;\n  backText: string;\n  todayText: string;\n}\n\nfunction DatePicker({\n  date,\n  onDateChange,\n  locale,\n  disableCloseOnSelect,\n  doneText,\n  backText,\n  todayText,\n}: DatePickerProps) {\n  // TODO: Listen to changes in width.\n  const width = useRef(Dimensions.get('window').width).current;\n\n  const [tab, setTab] = useState<'date' | 'time'>('date');\n\n  const [yearMonthSelectionStep, setYearMonthSelectionStep] = useState<\n    'year' | 'month' | undefined\n  >();\n\n  const [visible, setVisible] = useState(false);\n  const onClose = useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  const onPress = useCallback(() => {\n    setVisible(true);\n  }, []);\n\n  const onGoToYears = useCallback(() => {\n    setYearMonthSelectionStep('year');\n  }, []);\n\n  const onGoToMonths = useCallback(() => {\n    setYearMonthSelectionStep('month');\n  }, []);\n\n  const handleDateChange = useCallback(\n    (date: Date) => {\n      onDateChange?.(date);\n      if (!disableCloseOnSelect) onClose();\n    },\n    [onDateChange, disableCloseOnSelect, onClose],\n  );\n\n  const content = useMemo(() => {\n    return (\n      <Calendar\n        width={width}\n        locale={locale}\n        date={date}\n        onDateChange={handleDateChange}\n        onGoToYears={onGoToYears}\n        onGoToMonths={onGoToMonths}\n        yearMonthSelectionStep={yearMonthSelectionStep}\n        setYearMonthSelectionStep={setYearMonthSelectionStep}\n        todayText={todayText}\n      />\n    );\n  }, [\n    date,\n    handleDateChange,\n    locale,\n    onGoToMonths,\n    onGoToYears,\n    todayText,\n    width,\n    yearMonthSelectionStep,\n  ]);\n\n  const formattedDate = useMemo(\n    () => formatDate(date, 'PPP', locale),\n    [date, locale],\n  );\n\n  const doneButtonText = useMemo(() => {\n    return yearMonthSelectionStep ? backText : doneText;\n  }, [backText, doneText, yearMonthSelectionStep]);\n\n  const onDonePress = useCallback(() => {\n    if (yearMonthSelectionStep) setYearMonthSelectionStep(undefined);\n    else setVisible(false);\n  }, [yearMonthSelectionStep]);\n\n  useEffect(() => {\n    if (visible) setYearMonthSelectionStep(undefined);\n  }, [visible]);\n\n  return (\n    <View>\n      <LinkButton\n        icon={CalendarEvent}\n        onPress={onPress}\n        text={formattedDate}\n        showChevron={false}\n        bold\n        focused={visible}\n      />\n      <BottomSheet\n        height={disableCloseOnSelect ? 410 : 350}\n        visible={visible}\n        onClose={onClose}\n      >\n        {/* {yearMonthSelectionStep === undefined ? (\n          <View style={styles.tabsContainer}>\n            <Button\n              text=\"Date\"\n              color=\"primary\"\n              variant=\"rounded\"\n              fullwidth={false}\n              style={styles.tab}\n              onPress={() => setTab('date')}\n            />\n            <Button\n              text=\"Time\"\n              variant=\"rounded\"\n              fullwidth={false}\n              style={styles.tab}\n              buttonStyle={styles.tabButton}\n              onPress={() => setTab('time')}\n            />\n          </View>\n        ) : null} */}\n        {content}\n        {disableCloseOnSelect ? (\n          <View\n            style={{\n              padding: 10,\n            }}\n          >\n            <Button\n              color=\"primary\"\n              text={doneButtonText}\n              onPress={onDonePress}\n            />\n          </View>\n        ) : null}\n      </BottomSheet>\n    </View>\n  );\n}\n\nDatePicker.defaultProps = {\n  date: new Date(),\n  locale: 'en-US',\n  doneText: 'Done',\n  backText: 'Back',\n  todayText: 'Today',\n};\n\nconst styles = StyleSheet.create({\n  tabsContainer: {\n    flexDirection: 'row',\n    padding: 10,\n  },\n  tab: {\n    flex: 1,\n    height: 45,\n    marginHorizontal: 10,\n  },\n  tabButton: {},\n});\n\nexport default React.memo(DatePicker);\n"]}