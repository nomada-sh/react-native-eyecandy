{"version":3,"sources":["CodeInput.tsx"],"names":["React","useEffect","useMemo","useRef","useState","StyleSheet","View","Keyboard","TextInput","TextInputBase","Cell","CodeInput","onFinish","dimissKeyboardOnFinish","length","style","size","inputRef","code","setCode","focused","setFocused","focusedIndex","setFocusedIndex","finished","cells","newCells","i","push","index","current","focus","substring","dismiss","subscription","addListener","blur","remove","styles","container","text","test","newCode","Math","max","min","lastChar","slice","position","width","height","top","bottom","left","right","borderWidth","backgroundColor","create","flexDirection","justifyContent","flexWrap"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n  Keyboard,\n  TextInput as TextInputBase,\n} from 'react-native';\n\nimport Cell from './Cell';\n\nexport interface CodeInputProps {\n  onFinish: (code: string) => void;\n  dimissKeyboardOnFinish?: boolean;\n  length: number;\n  style?: StyleProp<ViewStyle>;\n  size?: number;\n}\n\nfunction CodeInput({\n  onFinish,\n  dimissKeyboardOnFinish = true,\n  length,\n  style,\n  size,\n}: CodeInputProps) {\n  const inputRef = useRef<TextInputBase | null>(null);\n  const [code, setCode] = useState('');\n  const [focused, setFocused] = useState(false);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const finished = useMemo(() => code.length === length, [code, length]);\n\n  const cells = useMemo(() => {\n    const newCells = [];\n\n    for (let i = 0; i < length; i++) {\n      newCells.push(\n        <Cell\n          key={i}\n          index={i}\n          value={code[i]}\n          size={size}\n          onPress={index => {\n            inputRef.current?.focus();\n            setCode(code.substring(0, index));\n          }}\n          focused={focused && focusedIndex === i}\n        />,\n      );\n    }\n\n    return newCells;\n  }, [length, code, size, focused, focusedIndex]);\n\n  useEffect(() => {\n    setCode('');\n  }, [length]);\n\n  useEffect(() => {\n    setFocusedIndex(code.length === length ? length - 1 : code.length);\n  }, [code, dimissKeyboardOnFinish, length, onFinish]);\n\n  useEffect(() => {\n    if (focused && finished) {\n      dimissKeyboardOnFinish && Keyboard.dismiss();\n      onFinish(code);\n    }\n  }, [code, dimissKeyboardOnFinish, finished, focused, onFinish]);\n\n  useEffect(() => {\n    if (!focused) return;\n\n    const subscription = Keyboard.addListener('keyboardDidHide', () => {\n      inputRef.current?.blur();\n    });\n\n    return () => {\n      subscription.remove();\n    };\n  }, [focused]);\n\n  return (\n    <View style={[styles.container, style]}>\n      {cells}\n      <TextInputBase\n        keyboardType=\"numeric\"\n        ref={inputRef}\n        autoCorrect={false}\n        spellCheck={false}\n        autoCapitalize=\"none\"\n        maxLength={length + 1}\n        value={code}\n        onChangeText={text => {\n          if (!/^\\d*$/.test(text)) return;\n\n          const newCode = text.substring(\n            0,\n            Math.max(0, Math.min(text.length - 1, length - 1)),\n          );\n          const lastChar = text.slice(-1);\n          setCode(newCode + lastChar);\n        }}\n        style={{\n          position: 'absolute',\n          width: 0,\n          height: '100%',\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          borderWidth: 0,\n          backgroundColor: 'transparent',\n        }}\n        onFocus={() => setFocused(true)}\n        onBlur={() => setFocused(false)}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    flexWrap: 'wrap',\n  },\n});\n\nexport default CodeInput;\n"]}