{"version":3,"sources":["useStyles.ts"],"names":["StyleSheet","Color","useColors","getRippleColor","useStyles","color","inverse","variant","height","disabled","fullwidth","colors","c","button","background","foreground","borderRadius","test","backgroundColor","rgb","rippleColor","disabledColor","fade","alpha","create","container","overflow","width","undefined","flex","string","justifyContent","alignItems","ripple","position","top","left","right","bottom","loadingContainer","loading"],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAEEC,SAFF,QAGO,wCAHP;AAIA,SAASC,cAAT,QAA+B,aAA/B;AAEA,eAAe,SAASC,SAAT,OAcZ;AAAA,MAd+B;AAChCC,IAAAA,KAAK,GAAG,SADwB;AAEhCC,IAAAA,OAAO,GAAG,KAFsB;AAGhCC,IAAAA,OAAO,GAAG,SAHsB;AAIhCC,IAAAA,MAAM,GAAG,EAJuB;AAKhCC,IAAAA,QALgC;AAMhCC,IAAAA,SAAS,GAAG;AANoB,GAc/B;AACD,QAAMC,MAAM,GAAGT,SAAS,CAACU,CAAC,IAAIA,CAAC,CAACC,MAAR,CAAxB;AACA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA6BJ,MAAM,CAACN,KAAD,CAAzC;AAEA,QAAMW,YAAY,GAAG,qBAAqBC,IAArB,CAA0BV,OAA1B,IAAqCC,MAAM,GAAG,CAA9C,GAAkD,EAAvE;AAEA,MAAIU,eAAe,GAAGjB,KAAK,CAACK,OAAO,GAAGS,UAAH,GAAgBD,UAAxB,CAAL,CAAyCK,GAAzC,EAAtB;AAEA,QAAMC,WAAW,GAAGjB,cAAc,CAACe,eAAD,CAAlC;AAEA,MAAIG,aAAa,GAAGH,eAAe,CAACI,IAAhB,CAAqB,GAArB,CAApB;AAEA,MAAI,yBAAyBL,IAAzB,CAA8BV,OAA9B,CAAJ,EACEW,eAAe,GAAGA,eAAe,CAACK,KAAhB,CAAsB,CAAtB,CAAlB;AAEF,SAAOvB,UAAU,CAACwB,MAAX,CAAkB;AACvBC,IAAAA,SAAS,EAAE;AACTjB,MAAAA,MADS;AAETQ,MAAAA,YAFS;AAGTU,MAAAA,QAAQ,EAAE,QAHD;AAITC,MAAAA,KAAK,EAAEjB,SAAS,GAAG,MAAH,GAAYkB;AAJnB,KADY;AAOvBf,IAAAA,MAAM,EAAE;AACNgB,MAAAA,IAAI,EAAE,CADA;AAENb,MAAAA,YAFM;AAGNE,MAAAA,eAAe,EAAEA,eAAe,CAACY,MAAhB,EAHX;AAINC,MAAAA,cAAc,EAAE,QAJV;AAKNC,MAAAA,UAAU,EAAE;AALN,KAPe;AAcvBC,IAAAA,MAAM,EAAE;AACN5B,MAAAA,KAAK,EAAEe,WAAW,CAACU,MAAZ;AADD,KAde;AAiBvBrB,IAAAA,QAAQ,EAAE;AACRS,MAAAA,eAAe,EAAET,QAAQ,GAAGY,aAAa,CAACS,MAAd,EAAH,GAA4BF,SAD7C;AAERM,MAAAA,QAAQ,EAAE,UAFF;AAGRC,MAAAA,GAAG,EAAE,CAHG;AAIRC,MAAAA,IAAI,EAAE,CAJE;AAKRC,MAAAA,KAAK,EAAE,CALC;AAMRC,MAAAA,MAAM,EAAE;AANA,KAjBa;AAyBvBC,IAAAA,gBAAgB,EAAE;AAChBL,MAAAA,QAAQ,EAAE,UADM;AAEhBC,MAAAA,GAAG,EAAE,CAFW;AAGhBC,MAAAA,IAAI,EAAE,CAHU;AAIhBC,MAAAA,KAAK,EAAE,CAJS;AAKhBC,MAAAA,MAAM,EAAE,CALQ;AAMhBP,MAAAA,cAAc,EAAE;AANA,KAzBK;AAiCvBS,IAAAA,OAAO,EAAE;AACPnC,MAAAA,KAAK,EAAEC,OAAO,GAAGQ,UAAH,GAAgBC;AADvB;AAjCc,GAAlB,CAAP;AAqCD","sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport Color from 'color';\n\nimport {\n  ThemeButtonColorChoices,\n  useColors,\n} from '@nomada-sh/react-native-eyecandy-theme';\nimport { getRippleColor } from '../../utils';\n\nexport default function useStyles({\n  color = 'default',\n  inverse = false,\n  variant = 'default',\n  height = 56,\n  disabled,\n  fullwidth = true,\n}: {\n  color?: ThemeButtonColorChoices;\n  inverse?: boolean;\n  variant?: 'default' | 'outlined' | 'rounded' | 'transparent-rounded';\n  height?: number;\n  disabled?: boolean | null;\n  fullwidth?: boolean;\n}) {\n  const colors = useColors(c => c.button);\n  const { background, foreground } = colors[color];\n\n  const borderRadius = /([a-z]+-)?rounded$/.test(variant) ? height / 2 : 12;\n\n  let backgroundColor = Color(inverse ? foreground : background).rgb();\n\n  const rippleColor = getRippleColor(backgroundColor);\n\n  let disabledColor = backgroundColor.fade(0.4);\n\n  if (/^transparent(-[a-z]+)?/.test(variant))\n    backgroundColor = backgroundColor.alpha(0);\n\n  return StyleSheet.create({\n    container: {\n      height,\n      borderRadius,\n      overflow: 'hidden',\n      width: fullwidth ? '100%' : undefined,\n    },\n    button: {\n      flex: 1,\n      borderRadius,\n      backgroundColor: backgroundColor.string(),\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    ripple: {\n      color: rippleColor.string(),\n    },\n    disabled: {\n      backgroundColor: disabled ? disabledColor.string() : undefined,\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n    },\n    loadingContainer: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      justifyContent: 'center',\n    },\n    loading: {\n      color: inverse ? background : foreground,\n    },\n  });\n}\n"]}