{"version":3,"sources":["BottomSheet.tsx"],"names":["React","useEffect","useImperativeHandle","useRef","Platform","RBSheet","useTheme","DARK_MASK_COLOR","LIGHT_MASK_COLOR","BottomSheet","forwardRef","forwardedRef","style","visible","customStyles","props","dark","background","divider","t","colors","default","ref","open","current","close","wrapper","backgroundColor","container","borderTopLeftRadius","borderTopRightRadius","padding","paddingTop","draggableIcon","width","marginBottom","defaultProps","closeOnDragDown","animationType","height","minClosingHeight","openDuration","closeDuration","dragFromTopOnly","closeOnPressMask","closeOnPressBack","keyboardAvoidingViewEnabled","OS","onClose","onOpen"],"mappings":"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","sourcesContent":["import React, { useEffect, useImperativeHandle, useRef } from 'react';\nimport { Platform, StyleProp, ViewStyle } from 'react-native';\n\nimport RBSheet, { RBSheetProps } from './RBSheet';\n\nimport { useTheme } from '@nomada-sh/react-native-eyecandy-theme';\n\nexport interface BottomSheetProps extends RBSheetProps {\n  ref?: React.Ref<RBSheet>;\n  children?: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  visible?: boolean;\n}\n\nexport type BottomSheetHandle = {\n  open: () => void;\n  close: () => void;\n};\n\nconst DARK_MASK_COLOR = 'rgba(0, 0, 0, 0.75)',\n  LIGHT_MASK_COLOR = 'rgba(0, 0, 0, 0.5)';\n\nconst BottomSheet = React.forwardRef<BottomSheetHandle, BottomSheetProps>(\n  ({ style, visible, customStyles, ...props }, forwardedRef?) => {\n    // TODO: Create BottomSheet colors.\n    const { dark, background, divider } = useTheme(t => ({\n      dark: t.dark,\n      background: t.colors.background.default,\n      divider: t.colors.divider.default,\n    }));\n\n    const ref = useRef<RBSheet>(null);\n\n    useImperativeHandle(forwardedRef, () => ({\n      open: () => ref.current?.open(),\n      close: () => ref.current?.close(),\n    }));\n\n    useEffect(() => {\n      if (visible) ref.current?.open();\n      else ref.current?.close();\n    }, [visible]);\n\n    return (\n      <RBSheet\n        customStyles={{\n          wrapper: [\n            {\n              backgroundColor: dark ? DARK_MASK_COLOR : LIGHT_MASK_COLOR,\n            },\n            customStyles.wrapper,\n          ],\n          container: [\n            {\n              backgroundColor: background.container,\n              borderTopLeftRadius: 32,\n              borderTopRightRadius: 32,\n              padding: 20,\n              paddingTop: 0,\n            },\n            customStyles.container,\n            style,\n          ],\n          draggableIcon: [\n            {\n              backgroundColor: divider,\n              width: 64,\n              marginBottom: 20,\n            },\n            customStyles.draggableIcon,\n          ],\n        }}\n        {...props}\n        ref={ref}\n      />\n    );\n  },\n);\n\nBottomSheet.defaultProps = {\n  closeOnDragDown: true,\n  animationType: 'none',\n  height: 260,\n  minClosingHeight: 0,\n  openDuration: 300,\n  closeDuration: 200,\n  dragFromTopOnly: false,\n  closeOnPressMask: true,\n  closeOnPressBack: true,\n  keyboardAvoidingViewEnabled: Platform.OS === 'ios',\n  customStyles: {},\n  onClose: () => {},\n  onOpen: () => {},\n};\n\nexport default BottomSheet;\n"]}