{"version":3,"sources":["IconButton.tsx"],"names":["React","useMemo","BaseButton","useColors","IconButton","icon","Icon","style","size","iconSize","iconSizeProp","color","iconColor","iconColorProp","variant","inverse","props","foreground","background","c","button","width","height"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA8C,OAA9C;AAGA,OAAOC,UAAP,MAA4C,eAA5C;AACA,SAASC,SAAT,QAA0B,wCAA1B;;AAeA,SAASC,UAAT,OAUoB;AAAA,MAVA;AAClBC,IAAAA,IAAI,EAAEC,IADY;AAElBC,IAAAA,KAFkB;AAGlBC,IAAAA,IAAI,GAAG,EAHW;AAIlBC,IAAAA,QAAQ,EAAEC,YAJQ;AAKlBC,IAAAA,KAAK,GAAG,SALU;AAMlBC,IAAAA,SAAS,EAAEC,aANO;AAOlBC,IAAAA,OAAO,GAAG,SAPQ;AAQlBC,IAAAA,OARkB;AASlB,OAAGC;AATe,GAUA;AAClB,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA6Bf,SAAS,CAACgB,CAAC,IAAIA,CAAC,CAACC,MAAF,CAAST,KAAT,CAAN,CAA5C;AAEA,MAAIN,IAAe,GAAGJ,OAAO,CAAC,MAAM;AAClC,UAAMQ,QAAQ,GAAGC,YAAH,aAAGA,YAAH,cAAGA,YAAH,GAAmBF,IAAI,GAAG,GAAxC;AACA,UAAMI,SAAS,GAAGC,aAAa,GAC3BA,aAD2B,GAE3BE,OAAO,GACPG,UADO,GAEPD,UAJJ;AAMA,WAAOX,IAAI,gBAAG,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAEG,QAAZ;AAAsB,MAAA,MAAM,EAAEG;AAA9B,MAAH,GAAiD,IAA5D;AACD,GAT4B,EAS1B,CACDN,IADC,EAEDY,UAFC,EAGDD,UAHC,EAIDJ,aAJC,EAKDH,YALC,EAMDK,OANC,EAODP,IAPC,CAT0B,CAA7B;AAmBA,sBACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAE,CACL;AACEa,MAAAA,KAAK,EAAEb,IADT;AAEEc,MAAAA,MAAM,EAAEd;AAFV,KADK,EAKLD,KALK,CADT;AAQE,IAAA,KAAK,EAAEI,KART;AASE,IAAA,OAAO,EAAEI,OATX;AAUE,IAAA,MAAM,EAAEP,IAVV;AAWE,IAAA,OAAO,EAAEM;AAXX,KAYME,KAZN,GAcGX,IAdH,CADF;AAkBD;;AAED,eAAeD,UAAf","sourcesContent":["import React, { useMemo, FC, ReactNode } from 'react';\nimport type { StyleProp, ViewStyle } from 'react-native';\n\nimport BaseButton, { BaseButtonProps } from '../BaseButton';\nimport { useColors } from '@nomada-sh/react-native-eyecandy-theme';\n\ninterface IconProps {\n  size: number;\n  stroke?: string;\n  style?: StyleProp<ViewStyle>;\n}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  icon?: FC<IconProps>;\n  size?: number;\n  iconSize?: number;\n  iconColor?: string;\n}\n\nfunction IconButton({\n  icon: Icon,\n  style,\n  size = 56,\n  iconSize: iconSizeProp,\n  color = 'default',\n  iconColor: iconColorProp,\n  variant = 'rounded',\n  inverse,\n  ...props\n}: IconButtonProps) {\n  const { foreground, background } = useColors(c => c.button[color]);\n\n  let icon: ReactNode = useMemo(() => {\n    const iconSize = iconSizeProp ?? size * 0.4;\n    const iconColor = iconColorProp\n      ? iconColorProp\n      : inverse\n      ? background\n      : foreground;\n\n    return Icon ? <Icon size={iconSize} stroke={iconColor} /> : null;\n  }, [\n    Icon,\n    background,\n    foreground,\n    iconColorProp,\n    iconSizeProp,\n    inverse,\n    size,\n  ]);\n\n  return (\n    <BaseButton\n      style={[\n        {\n          width: size,\n          height: size,\n        },\n        style,\n      ]}\n      color={color}\n      inverse={inverse}\n      height={size}\n      variant={variant}\n      {...props}\n    >\n      {icon}\n    </BaseButton>\n  );\n}\n\nexport default IconButton;\n"]}