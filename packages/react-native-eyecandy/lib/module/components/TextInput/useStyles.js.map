{"version":3,"sources":["useStyles.tsx"],"names":["React","useCallback","StyleSheet","useTheme","useColors","useStyles","color","focused","widthPaddingEnd","widthPaddingStart","value","dirty","hasError","fullWidth","palette","typography","dark","colors","c","input","fontSize","body","empty","undefined","padding","errorColor","error","backgroundColor","background","textColor","foreground","placeholderColor","placeholder","indicatorColor","indicator","iconColor","keyboardAppearance","styles","create","container","width","inputContainer","height","borderWidth","borderRadius","overflow","flexDirection","borderStyle","borderColor","iconContainer","justifyContent","paddingHorizontal","icon","flex","medium","fontWeight","paddingEnd","paddingStart","inputPlaceholder","renderIcon","Icon","stroke"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport { useTheme, useColors } from '@nomada-sh/react-native-eyecandy-theme';\n\nimport type { TextInputIcon, TextInputProps } from './typings';\n\nexport default function useStyles({\n  color = 'default',\n  focused,\n  widthPaddingEnd,\n  widthPaddingStart,\n  value,\n  dirty = false,\n  hasError = false,\n  fullWidth = true,\n}: {\n  color?: TextInputProps['color'];\n  focused: boolean;\n  widthPaddingEnd: boolean;\n  widthPaddingStart: boolean;\n  value?: string;\n  dirty?: boolean;\n  hasError?: boolean;\n  fullWidth?: boolean;\n}) {\n  const { palette, typography, dark } = useTheme();\n  const colors = useColors(c => c.input[color]);\n  const fontSize = typography.body.fontSize;\n\n  const empty = dirty || value === undefined || value === '';\n\n  const padding = 16;\n\n  const errorColor = palette.error[200];\n\n  const backgroundColor = focused\n    ? colors.focused.background\n    : colors.background;\n\n  let textColor = colors.foreground;\n  textColor = hasError ? errorColor : textColor;\n\n  let placeholderColor = colors.placeholder;\n  placeholderColor = hasError ? errorColor : placeholderColor;\n\n  let indicatorColor = focused ? colors.focused.indicator : backgroundColor;\n  indicatorColor = hasError ? errorColor : indicatorColor;\n\n  let iconColor = focused ? indicatorColor : textColor;\n\n  const keyboardAppearance: TextInputProps['keyboardAppearance'] = dark\n    ? 'dark'\n    : 'light';\n\n  const styles = StyleSheet.create({\n        container: {\n          width: fullWidth ? '100%' : undefined,\n        },\n        inputContainer: {\n          height: 56,\n          borderWidth: 1,\n          backgroundColor,\n          borderRadius: 12,\n          overflow: 'hidden',\n          flexDirection: 'row',\n          borderStyle: 'solid',\n          borderColor: indicatorColor,\n        },\n        iconContainer: {\n          justifyContent: 'center',\n          paddingHorizontal: padding,\n        },\n        icon: {\n          fontSize: 20,\n          color: iconColor,\n        },\n        input: {\n          flex: 1,\n          color: textColor,\n          fontSize: fontSize.medium,\n          fontWeight: empty ? 'normal' : '700',\n          paddingEnd: widthPaddingEnd ? padding : 0,\n          paddingStart: widthPaddingStart ? padding : 0,\n        },\n        inputPlaceholder: {\n          color: placeholderColor,\n        },\n      })\n\n  const renderIcon = useCallback(\n    (Icon: TextInputIcon, stroke?: string) => {\n      return (\n        <Icon\n          size={styles.icon.fontSize}\n          stroke={stroke || styles.icon.color}\n        />\n      );\n    },\n    [styles.icon.color, styles.icon.fontSize],\n  );\n\n  return {\n    styles,\n    keyboardAppearance,\n    renderIcon,\n  };\n}\n"]}