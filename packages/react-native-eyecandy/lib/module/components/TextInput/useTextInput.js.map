{"version":3,"sources":["useTextInput.ts"],"names":["useCallback","useEffect","useMemo","useRef","useState","useTextInput","onFocus","onBlur","secureTextEntry","secureTextEntryProp","onSecureTextEntryChange","inputRef","inputRefProp","error","errors","required","placeholder","placeholderProp","hasError","errs","concat","reduce","result","err","focused","setFocused","undefined","handleFocus","e","handleBlur","onPressIcon","current","focus","setSecureTextEntry","onPressSecureTextEntryToggle","prev"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport type { TextInputProps, TextInputRefCurrent } from './typings';\n\nexport default function useTextInput({\n  onFocus,\n  onBlur,\n  secureTextEntry: secureTextEntryProp = false,\n  onSecureTextEntryChange,\n  inputRef: inputRefProp,\n  error,\n  errors = [],\n  required,\n  placeholder: placeholderProp,\n}: {\n  onFocus?: TextInputProps['onFocus'];\n  onBlur?: TextInputProps['onBlur'];\n  secureTextEntry?: boolean;\n  onSecureTextEntryChange?: TextInputProps['onSecureTextEntryChange'];\n  error?: TextInputProps['error'];\n  errors?: TextInputProps['errors'];\n  inputRef?: TextInputProps['inputRef'];\n  required?: boolean;\n  placeholder?: string;\n}) {\n  const hasError = useMemo(() => {\n    const errs = error ? errors.concat([error]) : [...errors];\n    return errs.reduce((result, [err]) => result || !!err, false);\n  }, [error, errors]);\n  const [focused, setFocused] = useState(false);\n\n  const inputRef = useRef<TextInputRefCurrent>(null);\n\n  const placeholder = placeholderProp ? `${placeholderProp}${required ? ' *' : ''}` : undefined;\n\n  const handleFocus = useCallback<NonNullable<typeof onFocus>>(\n    e => {\n      setFocused(true);\n      onFocus?.(e);\n    },\n    [onFocus],\n  );\n\n  const handleBlur = useCallback<NonNullable<typeof onBlur>>(\n    e => {\n      setFocused(false);\n      onBlur?.(e);\n    },\n    [onBlur],\n  );\n\n  const onPressIcon = useCallback(() => {\n    inputRef.current?.focus();\n  }, [inputRef]);\n\n  const [secureTextEntry, setSecureTextEntry] = useState(secureTextEntryProp);\n\n  const onPressSecureTextEntryToggle = useCallback(() => {\n    setSecureTextEntry(prev => !prev);\n  }, []);\n\n  useEffect(() => {\n    setSecureTextEntry(secureTextEntryProp);\n  }, [secureTextEntryProp]);\n\n  useEffect(() => {\n    onSecureTextEntryChange && onSecureTextEntryChange(secureTextEntry);\n  }, [onSecureTextEntryChange, secureTextEntry]);\n\n  useEffect(() => {\n    if (typeof inputRefProp === 'function') inputRefProp(inputRef.current);\n    else if (inputRefProp) inputRefProp.current = inputRef.current;\n  }, [inputRef, inputRefProp]);\n\n  return {\n    inputRef,\n    focused,\n    handleBlur,\n    handleFocus,\n    onPressIcon,\n    onPressSecureTextEntryToggle,\n    secureTextEntry,\n    hasError,\n    placeholder,\n  };\n}\n"]}