{"version":3,"sources":["useValues.ts"],"names":["useCallback","useState","useUpdateEffect","useValues","fields","createValues","Object","entries","reduce","vals","name","field","initialValue","values","setValues","setValue","value","v","clearValues"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,eAAT,QAAgC,WAAhC;AAIA,eAAe,SAASC,SAAT,CAAqCC,MAArC,EAAgD;AAC7D,QAAMC,YAAY,GAAGL,WAAW,CAAC,MAAM;AACrC,WAAOM,MAAM,CAACC,OAAP,CAAeH,MAAf,EAAuBI,MAAvB,CAA8B,CAACC,IAAD,WAAyB;AAAA,UAAlB,CAACC,IAAD,EAAOC,KAAP,CAAkB;AAC5D,UAAIC,YAAY,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACC,YAA7D;AAEA,aAAO,EACL,GAAGH,IADE;AAEL,SAACC,IAAD,GAAQE,YAAY,IAAI;AAFnB,OAAP;AAID,KAPM,EAOJ,EAPI,CAAP;AAQD,GAT+B,EAS7B,CAACR,MAAD,CAT6B,CAAhC;AAWA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAACI,YAAD,CAApC;AAEA,QAAMU,QAAQ,GAAGf,WAAW,CAC1B,CAACU,IAAD,EAAgBM,KAAhB,KAAkCF,SAAS,CAACG,CAAC,KAAK,EAAE,GAAGA,CAAL;AAAQ,KAACP,IAAD,GAAQM;AAAhB,GAAL,CAAF,CADjB,EAE1B,EAF0B,CAA5B;AAKA,QAAME,WAAW,GAAGlB,WAAW,CAC7B,MAAMc,SAAS,CAACT,YAAD,CADc,EAE7B,CAACA,YAAD,CAF6B,CAA/B;AAKAH,EAAAA,eAAe,CAAC,MAAM;AACpBgB,IAAAA,WAAW;AACZ,GAFc,EAEZ,CAACA,WAAD,CAFY,CAAf;AAIA,SAAO;AAAEL,IAAAA,MAAF;AAAUE,IAAAA,QAAV;AAAoBD,IAAAA,SAApB;AAA+BI,IAAAA;AAA/B,GAAP;AACD","sourcesContent":["import { useCallback, useState } from 'react';\n\nimport { useUpdateEffect } from 'react-use';\n\nimport type { Fields, Values, Name } from './types';\n\nexport default function useValues<T extends Fields>(fields: T) {\n  const createValues = useCallback(() => {\n    return Object.entries(fields).reduce((vals, [name, field]) => {\n      let initialValue = typeof field === 'string' ? field : field.initialValue;\n\n      return {\n        ...vals,\n        [name]: initialValue || '',\n      };\n    }, {} as Values<T>);\n  }, [fields]);\n\n  const [values, setValues] = useState(createValues);\n\n  const setValue = useCallback(\n    (name: Name<T>, value: string) => setValues(v => ({ ...v, [name]: value })),\n    [],\n  );\n\n  const clearValues = useCallback(\n    () => setValues(createValues),\n    [createValues],\n  );\n\n  useUpdateEffect(() => {\n    clearValues();\n  }, [clearValues]);\n\n  return { values, setValue, setValues, clearValues };\n}\n"]}