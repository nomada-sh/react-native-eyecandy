{"version":3,"sources":["useMessages.ts"],"names":["useCallback","useMemo","firstLetterToUpperCase","str","charAt","toUpperCase","slice","extractMessage","key","validation","name","defaultMessage","nameFormatted","Array","undefined","useMessages","fields","errors","extractMessages","field","Error","required","maxLength","n","v","minLength","validate","is","getMessages","error","Object","entries","reduce","acc","value","messages","m"],"mappings":"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","sourcesContent":["import { useCallback, useMemo } from 'react';\n\nimport type {\n  Fields,\n  Errors,\n  Messages,\n  Error,\n  Message,\n  Name,\n  ValidationType,\n  Validation,\n} from './types';\n\nconst firstLetterToUpperCase = (str: any) => {\n  if (typeof str !== 'string') return str;\n\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nfunction extractMessage<T extends ValidationType>(\n  key: string,\n  validation: Validation<T> | undefined,\n  name: any,\n  defaultMessage: (name: string, value: T) => string,\n) {\n  const nameFormatted = firstLetterToUpperCase(name);\n\n  if (validation instanceof Array) {\n    return typeof validation[1] === 'function'\n      ? validation[1](validation[0])\n      : validation[1];\n  }\n\n  if (validation !== undefined)\n    return defaultMessage(nameFormatted, validation);\n\n  return `${nameFormatted} is not valid. (${key})`;\n}\n\nexport default function useMessages<T extends Fields>(\n  fields: T,\n  errors: Errors<T>,\n): Messages<T> {\n  const extractMessages = useCallback(\n    (name: Name<T>, key: keyof Error) => {\n      const nameFormatted = firstLetterToUpperCase(name);\n      const field = fields[name];\n\n      // !Should never happen.\n      if (typeof field === 'string')\n        throw new Error(`Field ${name} has no validation requirements`);\n\n      switch (key) {\n        case 'required':\n          return typeof field.required === 'string'\n            ? field.required\n            : `${nameFormatted} is required.`;\n        case 'maxLength':\n          return extractMessage(\n            'maxLength',\n            field.maxLength,\n            name,\n            (n, v) => `${n} must be at most ${v} characters long.`,\n          );\n        case 'minLength':\n          return extractMessage(\n            'minLength',\n            field.minLength,\n            name,\n            (n, v) => `${n} must be at least ${v} characters long.`,\n          );\n        case 'validate':\n          return extractMessage(\n            'validate',\n            field.validate,\n            name,\n            n => `${n} is not valid.`,\n          );\n        case 'is':\n          return extractMessage(\n            'is',\n            field.is,\n            name,\n            (n, v) => `${n} must be a valid ${v}.`,\n          );\n        default:\n          throw new Error(`Unknown error key: ${key}`);\n      }\n    },\n    [fields],\n  );\n\n  const getMessages = useCallback(\n    (name: Name<T>, error: Error) => {\n      return Object.entries(error).reduce((acc, [key, value]) => {\n        if (!value) return acc;\n\n        return {\n          ...acc,\n          [key]: extractMessages(name, key as keyof Error),\n        };\n      }, {} as Message);\n    },\n    [extractMessages],\n  );\n\n  const messages = useMemo(() => {\n    return Object.entries(errors).reduce((m, [name, error]) => {\n      return {\n        ...m,\n        [name]: getMessages(name, error),\n      };\n    }, {} as Messages<T>);\n  }, [errors, getMessages]);\n\n  return messages;\n}\n"]}