{"version":3,"sources":["useErrors.ts"],"names":["useCallback","useState","useUpdateEffect","getValidation","validation","undefined","Array","performValidation","func","validationValue","useErrors","fields","createErrors","Object","entries","reduce","vals","name","errors","setErrors","setError","error","prevErrors","newErrors","equal","JSON","stringify","clearErrors","validate","value","field","required","length","v","maxLength","minLength","is","test"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,eAAT,QAAgC,WAAhC;;AAWA,SAASC,aAAT,CACEC,UADF,EAEiB;AACf,MAAIA,UAAU,KAAKC,SAAnB,EAA8B,OAAOA,SAAP;;AAE9B,UAAQ,OAAOD,UAAf;AACE,SAAK,UAAL;AACA,SAAK,QAAL;AACA,SAAK,QAAL;AACE,aAAOA,UAAP;AAJJ;;AAOA,MAAIA,UAAU,YAAYE,KAA1B,EAAiC,OAAOF,UAAU,CAAC,CAAD,CAAjB;AAEjC,SAAOC,SAAP;AACD;;AAED,SAASE,iBAAT,CACEH,UADF,EAEEI,IAFF,EAGW;AACT,QAAMC,eAAe,GAAGN,aAAa,CAACC,UAAD,CAArC;AACA,SAAOK,eAAe,KAAKJ,SAApB,GAAgC,IAAhC,GAAuCG,IAAI,CAACC,eAAD,CAAlD;AACD;;AAED,eAAe,SAASC,SAAT,CAAqCC,MAArC,EAAgD;AAC7D,QAAMC,YAAY,GAAGZ,WAAW,CAAC,MAAM;AACrC,WAAOa,MAAM,CAACC,OAAP,CAAeH,MAAf,EAAuBI,MAAvB,CAA8B,CAACC,IAAD,WAAkB;AAAA,UAAX,CAACC,IAAD,CAAW;AACrD,aAAO,EACL,GAAGD,IADE;AAEL,SAACC,IAAD,GAAQ;AAFH,OAAP;AAID,KALM,EAKJ,EALI,CAAP;AAMD,GAP+B,EAO7B,CAACN,MAAD,CAP6B,CAAhC;AASA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAYW,YAAZ,CAApC;AAEA,QAAMQ,QAAQ,GAAGpB,WAAW,CAC1B,CAACiB,IAAD,EAAgBI,KAAhB,KACEF,SAAS,CAACG,UAAU,IAAI;AACtB,UAAMC,SAAS,GAAG,EAAE,GAAGD,UAAL;AAAiB,OAACL,IAAD,GAAQI;AAAzB,KAAlB;AACA,UAAMG,KAAK,GAAGC,IAAI,CAACC,SAAL,CAAeH,SAAf,MAA8BE,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAA5C;AACA,WAAOE,KAAK,GAAGF,UAAH,GAAgBC,SAA5B;AACD,GAJQ,CAFe,EAO1B,EAP0B,CAA5B;AAUA,QAAMI,WAAW,GAAG3B,WAAW,CAC7B,MAAMmB,SAAS,CAACP,YAAD,CADc,EAE7B,CAACA,YAAD,CAF6B,CAA/B;AAKA,QAAMgB,QAAQ,GAAG5B,WAAW,CAC1B,CAACiB,IAAD,EAAgBY,KAAhB,KAAkC;AAChC,UAAMR,KAAY,GAAG,EAArB;AACA,UAAMS,KAAK,GAAGnB,MAAM,CAACM,IAAD,CAApB;AAEA,QAAI,OAAOa,KAAP,KAAiB,QAArB,EAA+B,OAAOT,KAAP,CAJC,CAMhC;;AACA,UAAMU,QAAQ,GAAGD,KAAK,CAACC,QAAN,GAAiBF,KAAK,CAACG,MAAN,GAAe,CAAhC,GAAoC,IAArD,CAPgC,CAShC;;AACA,QAAI5B,UAAU,GAAGG,iBAAiB,CAACuB,KAAK,CAACF,QAAP,EAAiBK,CAAC,IAAIA,CAAC,CAACJ,KAAD,CAAvB,CAAlC,CAVgC,CAYhC;;AACA,QAAIK,SAAS,GAAG3B,iBAAiB,CAC/BuB,KAAK,CAACI,SADyB,EAE/BD,CAAC,IAAIJ,KAAK,CAACG,MAAN,IAAgBC,CAFU,CAAjC,CAbgC,CAkBhC;;AACA,QAAIE,SAAS,GAAG5B,iBAAiB,CAC/BuB,KAAK,CAACK,SADyB,EAE/BF,CAAC,IAAIJ,KAAK,CAACG,MAAN,IAAgBC,CAFU,CAAjC,CAnBgC,CAwBhC;;AACA,QAAIG,EAAE,GAAG7B,iBAAiB,CAACuB,KAAK,CAACM,EAAP,EAAWH,CAAC,IAAI;AACxC,cAAQA,CAAR;AACE,aAAK,OAAL;AACE,iBAAO,6BAA6BI,IAA7B,CAAkCR,KAAlC,CAAP;;AACF,aAAK,QAAL;AACE,iBAAO,QAAQQ,IAAR,CAAaR,KAAb,CAAP;AAJJ;AAMD,KAPyB,CAA1B;AASA,QAAI,CAACE,QAAL,EAAeV,KAAK,CAACU,QAAN,GAAiB,IAAjB;AACf,QAAI,CAAC3B,UAAL,EAAiBiB,KAAK,CAACO,QAAN,GAAiB,IAAjB;AACjB,QAAI,CAACM,SAAL,EAAgBb,KAAK,CAACa,SAAN,GAAkB,IAAlB;AAChB,QAAI,CAACC,SAAL,EAAgBd,KAAK,CAACc,SAAN,GAAkB,IAAlB;AAChB,QAAI,CAACC,EAAL,EAASf,KAAK,CAACe,EAAN,GAAW,IAAX;AAET,WAAOf,KAAP;AACD,GA1CyB,EA2C1B,CAACV,MAAD,CA3C0B,CAA5B;AA8CAT,EAAAA,eAAe,CAAC,MAAM;AACpByB,IAAAA,WAAW;AACZ,GAFc,EAEZ,CAACA,WAAD,CAFY,CAAf;AAIA,SAAO;AACLT,IAAAA,MADK;AAELC,IAAAA,SAFK;AAGLC,IAAAA,QAHK;AAILO,IAAAA,WAJK;AAKLC,IAAAA;AALK,GAAP;AAOD","sourcesContent":["import { useCallback, useState } from 'react';\n\nimport { useUpdateEffect } from 'react-use';\n\nimport type {\n  Fields,\n  Errors,\n  Error,\n  Name,\n  ValidationType,\n  Validation,\n} from './types';\n\nfunction getValidation<T extends ValidationType>(\n  validation: Validation<T> | undefined,\n): T | undefined {\n  if (validation === undefined) return undefined;\n\n  switch (typeof validation) {\n    case 'function':\n    case 'number':\n    case 'string':\n      return validation;\n  }\n\n  if (validation instanceof Array) return validation[0];\n\n  return undefined;\n}\n\nfunction performValidation<T extends ValidationType>(\n  validation: Validation<T> | undefined,\n  func: (value: T) => boolean,\n): boolean {\n  const validationValue = getValidation(validation);\n  return validationValue === undefined ? true : func(validationValue);\n}\n\nexport default function useErrors<T extends Fields>(fields: T) {\n  const createErrors = useCallback(() => {\n    return Object.entries(fields).reduce((vals, [name]) => {\n      return {\n        ...vals,\n        [name]: {},\n      };\n    }, {} as Errors<T>);\n  }, [fields]);\n\n  const [errors, setErrors] = useState<Errors<T>>(createErrors);\n\n  const setError = useCallback(\n    (name: Name<T>, error: Error) =>\n      setErrors(prevErrors => {\n        const newErrors = { ...prevErrors, [name]: error };\n        const equal = JSON.stringify(newErrors) === JSON.stringify(prevErrors);\n        return equal ? prevErrors : newErrors;\n      }),\n    [],\n  );\n\n  const clearErrors = useCallback(\n    () => setErrors(createErrors),\n    [createErrors],\n  );\n\n  const validate = useCallback(\n    (name: Name<T>, value: string) => {\n      const error: Error = {};\n      const field = fields[name];\n\n      if (typeof field === 'string') return error;\n\n      // Required validation\n      const required = field.required ? value.length > 0 : true;\n\n      // Custom validation\n      let validation = performValidation(field.validate, v => v(value));\n\n      // Max length validation\n      let maxLength = performValidation(\n        field.maxLength,\n        v => value.length <= v,\n      );\n\n      // Min length validation\n      let minLength = performValidation(\n        field.minLength,\n        v => value.length >= v,\n      );\n\n      // Is validation\n      let is = performValidation(field.is, v => {\n        switch (v) {\n          case 'email':\n            return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value);\n          case 'number':\n            return /^\\d+$/.test(value);\n        }\n      });\n\n      if (!required) error.required = true;\n      if (!validation) error.validate = true;\n      if (!maxLength) error.maxLength = true;\n      if (!minLength) error.minLength = true;\n      if (!is) error.is = true;\n\n      return error;\n    },\n    [fields],\n  );\n\n  useUpdateEffect(() => {\n    clearErrors();\n  }, [clearErrors]);\n\n  return {\n    errors,\n    setErrors,\n    setError,\n    clearErrors,\n    validate,\n  };\n}\n"]}