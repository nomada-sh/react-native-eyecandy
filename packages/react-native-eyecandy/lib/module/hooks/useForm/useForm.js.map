{"version":3,"sources":["useForm.ts"],"names":["useCallback","useRef","useErrors","useMessages","useValues","useForm","initialFields","fieldsRef","JSON","stringify","current","fields","values","setValue","clearValues","errors","setError","clearErrors","validate","messages","onChange","name","value","field","error","register","createErrors","errs","msgs","result","k","err","msg","push","props","onChangeText","maxLength","required","onSubmit","handleSubmit","extraValidation","valid","Object","keys","reduce","length","extra","clear"],"mappings":"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","sourcesContent":["import { useCallback, useRef } from 'react';\n\nimport type { Fields, InputProps, Message, Name, Error } from './types';\nimport useErrors from './useErrors';\nimport useMessages from './useMessages';\nimport useValues from './useValues';\n\nexport default function useForm<T extends Fields>(initialFields: T) {\n  const fieldsRef = useRef<T>(initialFields);\n  if (JSON.stringify(fieldsRef.current) !== JSON.stringify(initialFields))\n    fieldsRef.current = initialFields;\n\n  const fields = fieldsRef.current;\n\n  const { values, setValue, clearValues } = useValues(fields);\n  const { errors, setError, clearErrors, validate } = useErrors(fields);\n\n  const messages = useMessages(fields, errors);\n\n  const onChange = useCallback(\n    (name: Name<T>) => (value: string) => {\n      const field = fields[name];\n      const error = validate(name, value);\n\n      setError(name, error);\n      setValue(name, value);\n\n      typeof field !== 'string' && field.onChange?.(value);\n    },\n    [fields, setError, setValue, validate],\n  );\n\n  const register = useCallback(\n    (name: Name<T>) => {\n      const createErrors = () => {\n        // TODO: Refactor this.\n        const errs = errors[name] as Error;\n        const msgs = messages[name] as Message;\n\n        const result: [boolean, string][] = [];\n        for (let k in errs) {\n          const err = errs[k as keyof typeof errs] as boolean;\n          const msg = msgs[k as keyof typeof msgs] as string;\n          if (err && msg) result.push([err, msg]);\n        }\n\n        return result;\n      };\n\n      let props: InputProps = {\n        onChangeText: onChange(name),\n        value: values[name],\n        errors: createErrors(),\n      };\n\n      const field = fields[name];\n      if (typeof field !== 'string') {\n        if (typeof field.maxLength === 'number')\n          props.maxLength = field.maxLength;\n        else if (field.maxLength) props.maxLength = field.maxLength[0];\n\n        if (field.required) props.required = true;\n      }\n\n      return props;\n    },\n    [errors, fields, messages, onChange, values],\n  );\n\n  const onSubmit = useCallback(\n    (\n      handleSubmit: (v: typeof values) => void,\n      extraValidation?: (v: typeof values) => boolean,\n    ) => {\n      const valid = Object.keys(values).reduce((result, name) => {\n        const error = validate(name, values[name]);\n        setError(name, error);\n        return result && Object.keys(error).length === 0;\n      }, true);\n\n      const extra = extraValidation ? extraValidation(values) : true;\n\n      valid && extra && handleSubmit(values);\n    },\n    [setError, validate, values],\n  );\n\n  const clear = useCallback(() => {\n    clearErrors();\n    clearValues();\n  }, [clearErrors, clearValues]);\n\n  return {\n    errors,\n    messages,\n    values,\n    onChange,\n    onSubmit,\n    register,\n    clearErrors,\n    clearValues,\n    clear,\n  };\n}\n"]}