{"version":3,"sources":["Text.tsx"],"names":["React","Text","TextBase","useColors","weight","style","size","contrast","color","customColor","align","props","colors","c","text","textColor","normal","fontWeight","fontSize","textAlign"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,IAAI,IAAIC,QADV,QAIO,cAJP;AAMA,SAASC,SAAT,QAAkD,wCAAlD;;AAWA,SAASF,IAAT,OASc;AAAA,MATA;AACZG,IAAAA,MADY;AAEZC,IAAAA,KAFY;AAGZC,IAAAA,IAAI,GAAG,EAHK;AAIZC,IAAAA,QAAQ,GAAG,KAJC;AAKZC,IAAAA,KAAK,GAAG,SALI;AAMZC,IAAAA,WANY;AAOZC,IAAAA,KAPY;AAQZ,OAAGC;AARS,GASA;AACZ,QAAMC,MAAM,GAAGT,SAAS,CAACU,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAON,KAAP,CAAN,CAAxB;AAEA,MAAIO,SAAiB,GAAGH,MAAM,CAACI,MAA/B;AAEA,MAAIP,WAAJ,EACEM,SAAS,GAAGN,WAAZ;AACF,MAAIF,QAAJ,EACEQ,SAAS,GAAGH,MAAM,CAACL,QAAnB;AAEF,MAAIU,UAAJ;;AAEA,UAAQb,MAAR;AACE,SAAK,UAAL;AACEa,MAAAA,UAAU,GAAG,KAAb;AACA;;AACF,SAAK,SAAL;AACEA,MAAAA,UAAU,GAAG,QAAb;AACA;;AACF,SAAK,QAAL;AACEA,MAAAA,UAAU,GAAG,KAAb;AACA;;AACF;AACEA,MAAAA,UAAU,GAAGb,MAAb;AAXJ;;AAcA,sBACE,oBAAC,QAAD;AACE,IAAA,KAAK,EAAE,CACL;AACEa,MAAAA,UADF;AAEEC,MAAAA,QAAQ,EAAEZ,IAFZ;AAGEE,MAAAA,KAAK,EAAEO,SAHT;AAIEI,MAAAA,SAAS,EAAET;AAJb,KADK,EAOLL,KAPK;AADT,KAUMM,KAVN,EADF;AAcD;;AAED,eAAeV,IAAf","sourcesContent":["import React from 'react';\nimport {\n  Text as TextBase,\n  TextProps as TextBaseProps,\n  TextStyle,\n} from 'react-native';\n\nimport { useColors, ThemeTextColorsChoices } from '@nomada-sh/react-native-eyecandy-theme';\n\nexport interface TextProps extends TextBaseProps {\n  weight?: TextStyle['fontWeight'] | 'semibold' | 'medium' | 'regular';\n  size?: TextStyle['fontSize'];\n  align?: TextStyle['textAlign'];\n  contrast?: boolean;\n  color?: ThemeTextColorsChoices;\n  customColor?: string;\n}\n\nfunction Text({\n  weight,\n  style,\n  size = 14,\n  contrast = false,\n  color = 'default',\n  customColor,\n  align,\n  ...props\n}: TextProps) {\n  const colors = useColors(c => c.text[color]);\n\n  let textColor: string = colors.normal;\n\n  if (customColor)\n    textColor = customColor;\n  if (contrast)\n    textColor = colors.contrast;\n\n  let fontWeight: TextStyle['fontWeight'];\n\n  switch (weight) {\n    case 'semibold':\n      fontWeight = '700'\n      break;\n    case 'regular':\n      fontWeight = 'normal';\n      break;\n    case 'medium':\n      fontWeight = '500';\n      break;\n    default:\n      fontWeight = weight;\n  }\n\n  return (\n    <TextBase\n      style={[\n        {\n          fontWeight,\n          fontSize: size,\n          color: textColor,\n          textAlign: align,\n        },\n        style,\n      ]}\n      {...props}\n    />\n  );\n}\n\nexport default Text;\n"]}