{"version":3,"sources":["createColors.test.ts"],"names":["createColors","test","colors","expect","toEqual","background","any","Object","button","input","text","switch","backgroundColor","container","String","content","default","buttonColor","foreground","primary","textColor","normal","contrast","error","greyout","inputColor","placeholder","border","focused","indicator","swithColor","thumbColor","trackColor","trackColorEnabled","customColors"],"mappings":"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","sourcesContent":["import createColors from './createColors';\nimport { CustomThemeColors, ThemeButtonColors } from './types';\n\ntest('createColors', () => {\n  const colors = createColors();\n\n  expect(colors).toEqual({\n    background: expect.any(Object),\n    button: expect.any(Object),\n    input: expect.any(Object),\n    text: expect.any(Object),\n    switch: expect.any(Object),\n  });\n\n  const backgroundColor = {\n    container: expect.any(String),\n    content: expect.any(String),\n  };\n\n  expect(colors.background).toEqual({\n    default: backgroundColor,\n  });\n\n  const buttonColor = {\n    background: expect.any(String),\n    foreground: expect.any(String),\n  };\n\n  expect(colors.button).toEqual({\n    default: buttonColor,\n    primary: buttonColor,\n  });\n\n  const textColor = {\n    normal: expect.any(String),\n    contrast: expect.any(String),\n  };\n\n  expect(colors.text).toEqual({\n    default: textColor,\n    primary: textColor,\n    error: textColor,\n    greyout: textColor,\n  });\n\n  const inputColor = {\n    background: expect.any(String),\n    foreground: expect.any(String),\n    placeholder: expect.any(String),\n    border: expect.any(String),\n    focused: {\n      background: expect.any(String),\n      indicator: expect.any(String),\n    },\n  };\n\n  expect(colors.input).toEqual({\n    default: inputColor,\n  });\n\n  const swithColor = {\n    thumbColor: expect.any(String),\n    trackColor: expect.any(String),\n    trackColorEnabled: expect.any(String),\n  };\n\n  expect(colors.switch).toEqual({\n    default: swithColor,\n  });\n});\n\ntest('createColors button', () => {\n  const customColors: CustomThemeColors<ThemeButtonColors> = {\n    default: {\n      background: 'black',\n      foreground: 'white',\n    },\n    primary: {\n      background: 'blue',\n    },\n  };\n\n  const colors = createColors({\n    colors: {\n      button: customColors,\n    },\n  });\n\n  expect(colors.button).toEqual({\n    default: {\n      background: 'black',\n      foreground: 'white',\n    },\n    primary: {\n      background: 'blue',\n      foreground: expect.any(String),\n    },\n  });\n});\n"]}